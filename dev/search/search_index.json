{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction # PDM is a modern Python package manager with PEP 582 support. It installs and manages packages in a similar way to npm that doesn't need to create a virtualenv at all! Feature highlights # PEP 582 local package installer and runner, no virtualenv involved at all. Simple and relatively fast dependency resolver, mainly for large binary distributions. A PEP 517 build backend. PEP 621 project metadata. Flexible yet powerful plug-in system. Opted-in centralized installation cache like pnpm . Installation # PDM requires Python 3.7+ to be installed. It works on multiple platforms including Windows, Linux and MacOS. Note There is no restriction about what Python version your project is using, but installing PDM itself needs Python 3.7+. Recommended installation method # PDM requires python version 3.7 or higher. Like Pip, PDM provides an installation script that will install PDM into an isolated environment. Linux/Mac Windows 1 curl -sSL https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py | python3 - 1 ( Invoke-WebRequest -Uri https :// raw . githubusercontent . com / pdm-project / pdm / main / install-pdm . py -UseBasicParsing ). Content | python - For security reasons, you should verify the checksum of install-pdm.py . The sha256 checksum is: 67dccb18923340e21f3d70f9c6a467d532c6a41b295d6f1ba884b27604074d38 The installer will install PDM into the user site and the location depends on the system: $HOME/.local/bin for Unix %APPDATA%\\Python\\Scripts on Windows You can pass additional options to the script to control how PDM is installed: 1 2 3 4 5 6 7 8 9 10 usage: install-pdm.py [-h] [-v VERSION] [--prerelease] [--remove] [-p PATH] [-d DEP] optional arguments: -h, --help show this help message and exit -v VERSION, --version VERSION | envvar: PDM_VERSION Specify the version to be installed, or HEAD to install from the main branch --prerelease | envvar: PDM_PRERELEASE Allow prereleases to be installed --remove | envvar: PDM_REMOVE Remove the PDM installation -p PATH, --path PATH | envvar: PDM_HOME Specify the location to install PDM -d DEP, --dep DEP | envvar: PDM_DEPS Specify additional dependencies, can be given multiple times You can either pass the options after the script or set the env var value. Other installation methods # Homebrew Scoop pipx pip inside project 1 brew install pdm 1 2 scoop bucket add frostming https://github.com/frostming/scoop-frostming.git scoop install pdm 1 pipx install pdm Install the head version of GitHub repository. Make sure you have installed Git LFS on your system. 1 pipx install git+https://github.com/pdm-project/pdm.git@main#egg = pdm See also: https://pypa.github.io/pipx/ 1 pip install --user pdm By copying the Pyprojectx wrapper scripts to a project, you can install PDM as (npm-style) dev dependency inside that project. This allows different projects/branches to use different PDM versions. To initialize a new or existing project , cd into the project folder and: Linux/Mac Windows 1 2 curl -LO https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip && unzip wrappers.zip && rm -f wrappers.zip ./pw --init pdm 1 2 Invoke-WebRequest https :// github . com / pyprojectx / pyprojectx / releases / latest / download / wrappers . zip -OutFile wrappers . zip ; Expand-Archive -Path wrappers . zip -DestinationPath .; Remove-Item -Path wrappers . zip .\\ pw - -init pdm Enable PEP 582 globally # To make the Python interpreters aware of PEP 582 packages, one need to add the pdm/pep582/sitecustomize.py to the Python library search path. For Windows users # One just needs to execute pdm --pep582 , then environment variable will be changed automatically. Don't forget to restart the terminal session to take effect. For Mac and Linux users # The command to change the environment variables can be printed by pdm --pep582 [<SHELL>] . If <SHELL> isn't given, PDM will pick one based on some guesses. You can run eval \"$(pdm --pep582)\" to execute the command. You may want to write a line in your .bash_profile (or similar profiles) to make it effective when logging in. For example, in bash you can do this: 1 pdm --pep582 >> ~/.bash_profile Once again, Don't forget to restart the terminal session to take effect. Shell Completion # PDM supports generating completion scripts for Bash, Zsh, Fish or Powershell. Here are some common locations for each shell: Bash Zsh Fish Powershell 1 pdm completion bash > /etc/bash_completion.d/pdm.bash-completion 1 2 # Make sure ~/.zfunc is added to fpath, before compinit. pdm completion zsh > ~/.zfunc/_pdm Oh-My-Zsh: 1 2 mkdir $ZSH_CUSTOM /plugins/pdm pdm completion zsh > $ZSH_CUSTOM /plugins/pdm/_pdm Then make sure pdm plugin is enabled in ~/.zshrc 1 pdm completion fish > ~/.config/fish/completions/pdm.fish 1 2 3 4 5 6 7 8 9 10 # Create a directory to store completion scripts mkdir $PROFILE \\..\\ Completions echo @' Get-ChildItem \"$PROFILE\\..\\Completions\\\" | ForEach-Object { . $_.FullName } '@ | Out-File -Append -Encoding utf8 $PROFILE # Generate script Set-ExecutionPolicy Unrestricted -Scope CurrentUser pdm completion powershell | Out-File -Encoding utf8 $PROFILE \\..\\ Completions \\ pdm_completion . ps1 Unicode and ANSI supports # PDM provides a fancy terminal UI with the help of ANSI characters and unicode emojis. It can turn on/off automatically depending on whether it is supported on your terminal. However, if you see any garbled characters, set env var DISABLE_UNICODE_OUTPUT=1 to turn off it. Use with IDE # Now there are not built-in support or plugins for PEP 582 in most IDEs, you have to configure your tools manually. PDM will write and store project-wide configurations in .pdm.toml and you are recommended to add following lines in the .gitignore : 1 2 .pdm.toml __pypackages__/ PyCharm # Mark __pypackages__/<major.minor>/lib as Sources Root . Then, select as Python interpreter a Python installation with the same <major.minor> version. Additionally, if you want to use tools from the environment (e.g. pytest ), you have to add the __pypackages__/<major.minor>/bin directory to the PATH variable in the corresponding run/debug configuration. VSCode # Add the following two entries to the top-level dict in .vscode/settings.json : 1 2 3 4 { \"python.autoComplete.extraPaths\" : [ \"__pypackages__/<major.minor>/lib\" ], \"python.analysis.extraPaths\" : [ \"__pypackages__/<major.minor>/lib\" ] } Enable PEP582 globally , and make sure VSCode runs using the same user and shell you enabled PEP582 for. Cannot enable PEP582 globally? If for some reason you cannot enable PEP582 globally, you can still configure each \"launch\" in each project: set the PYTHONPATH environment variable in your launch configuration, in .vscode/launch.json . For example, to debug your pytest run: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"pytest\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"module\" : \"pytest\" , \"args\" : [ \"tests\" ], \"justMyCode\" : false , \"env\" : { \"PYTHONPATH\" : \"__pypackages__/<major.minor>/lib\" } } ] } If your package resides in a src directory, add it to PYTHONPATH as well: 1 \"env\" : { \"PYTHONPATH\" : \"src:__pypackages__/<major.minor>/lib\" } Using Pylance/Pyright? If you have configured \"python.analysis.diagnosticMode\": \"workspace\" , and you see a ton of errors/warnings as a result. you may need to create pyrightconfig.json in the workspace directory, and fill in the following fields: 1 2 3 { \"exclude\" : [ \"__pypackages__\" ] } Then restart the language server or VS Code and you're good to go. In the future ( microsoft/pylance-release#1150 ), maybe the problem will be solved. Using Jupyter Notebook? If you wish to use pdm to install jupyter notebook and use it in vscode in conjunction with the python extension: Use pdm add notebook or so to install notebook Add a .env file inside of your project director with contents like the following: 1 PYTHONPATH=/your-workspace-path/__pypackages__/<major>.<minor>/lib If the above still doesn't work, it's most likely because the environment variable is not properly loaded when the Notebook starts. There are two workarounds. Run code . in Terminal. It will open a new VSCode window in the current directory with the path set correctly. Use the Jupyter Notebook in the new window If you prefer not to open a new window, run the following at the beginning of your Jupyter Notebook to explicitly set the path: 1 2 import sys sys.path.append('/your-workspace-path/__pypackages__/<major>.<minor>/lib') Reference Issue Task Provider # In addition, there is a VSCode Task Provider extension available for download. This makes it possible for VSCode to automatically detect pdm scripts so they can be run natively as VSCode Tasks . Neovim # If using neovim-lsp with pyright and want your __pypackages__ directory to be added to the path, you can add this to your project's pyproject.toml . 1 2 [tool.pyright] extraPaths = [ \"__pypackages__/<major.minor>/lib/\" ] Seek for other IDEs or editors # PDM Eco-system # Awesome PDM is a curated list of awesome PDM plugins and resources.","title":"Home"},{"location":"#introduction","text":"PDM is a modern Python package manager with PEP 582 support. It installs and manages packages in a similar way to npm that doesn't need to create a virtualenv at all!","title":"Introduction"},{"location":"#feature-highlights","text":"PEP 582 local package installer and runner, no virtualenv involved at all. Simple and relatively fast dependency resolver, mainly for large binary distributions. A PEP 517 build backend. PEP 621 project metadata. Flexible yet powerful plug-in system. Opted-in centralized installation cache like pnpm .","title":"Feature highlights"},{"location":"#installation","text":"PDM requires Python 3.7+ to be installed. It works on multiple platforms including Windows, Linux and MacOS. Note There is no restriction about what Python version your project is using, but installing PDM itself needs Python 3.7+.","title":"Installation"},{"location":"#recommended-installation-method","text":"PDM requires python version 3.7 or higher. Like Pip, PDM provides an installation script that will install PDM into an isolated environment. Linux/Mac Windows 1 curl -sSL https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py | python3 - 1 ( Invoke-WebRequest -Uri https :// raw . githubusercontent . com / pdm-project / pdm / main / install-pdm . py -UseBasicParsing ). Content | python - For security reasons, you should verify the checksum of install-pdm.py . The sha256 checksum is: 67dccb18923340e21f3d70f9c6a467d532c6a41b295d6f1ba884b27604074d38 The installer will install PDM into the user site and the location depends on the system: $HOME/.local/bin for Unix %APPDATA%\\Python\\Scripts on Windows You can pass additional options to the script to control how PDM is installed: 1 2 3 4 5 6 7 8 9 10 usage: install-pdm.py [-h] [-v VERSION] [--prerelease] [--remove] [-p PATH] [-d DEP] optional arguments: -h, --help show this help message and exit -v VERSION, --version VERSION | envvar: PDM_VERSION Specify the version to be installed, or HEAD to install from the main branch --prerelease | envvar: PDM_PRERELEASE Allow prereleases to be installed --remove | envvar: PDM_REMOVE Remove the PDM installation -p PATH, --path PATH | envvar: PDM_HOME Specify the location to install PDM -d DEP, --dep DEP | envvar: PDM_DEPS Specify additional dependencies, can be given multiple times You can either pass the options after the script or set the env var value.","title":"Recommended installation method"},{"location":"#other-installation-methods","text":"Homebrew Scoop pipx pip inside project 1 brew install pdm 1 2 scoop bucket add frostming https://github.com/frostming/scoop-frostming.git scoop install pdm 1 pipx install pdm Install the head version of GitHub repository. Make sure you have installed Git LFS on your system. 1 pipx install git+https://github.com/pdm-project/pdm.git@main#egg = pdm See also: https://pypa.github.io/pipx/ 1 pip install --user pdm By copying the Pyprojectx wrapper scripts to a project, you can install PDM as (npm-style) dev dependency inside that project. This allows different projects/branches to use different PDM versions. To initialize a new or existing project , cd into the project folder and: Linux/Mac Windows 1 2 curl -LO https://github.com/pyprojectx/pyprojectx/releases/latest/download/wrappers.zip && unzip wrappers.zip && rm -f wrappers.zip ./pw --init pdm 1 2 Invoke-WebRequest https :// github . com / pyprojectx / pyprojectx / releases / latest / download / wrappers . zip -OutFile wrappers . zip ; Expand-Archive -Path wrappers . zip -DestinationPath .; Remove-Item -Path wrappers . zip .\\ pw - -init pdm","title":"Other installation methods"},{"location":"#enable-pep-582-globally","text":"To make the Python interpreters aware of PEP 582 packages, one need to add the pdm/pep582/sitecustomize.py to the Python library search path.","title":"Enable PEP 582 globally"},{"location":"#for-windows-users","text":"One just needs to execute pdm --pep582 , then environment variable will be changed automatically. Don't forget to restart the terminal session to take effect.","title":"For Windows users"},{"location":"#for-mac-and-linux-users","text":"The command to change the environment variables can be printed by pdm --pep582 [<SHELL>] . If <SHELL> isn't given, PDM will pick one based on some guesses. You can run eval \"$(pdm --pep582)\" to execute the command. You may want to write a line in your .bash_profile (or similar profiles) to make it effective when logging in. For example, in bash you can do this: 1 pdm --pep582 >> ~/.bash_profile Once again, Don't forget to restart the terminal session to take effect.","title":"For Mac and Linux users"},{"location":"#shell-completion","text":"PDM supports generating completion scripts for Bash, Zsh, Fish or Powershell. Here are some common locations for each shell: Bash Zsh Fish Powershell 1 pdm completion bash > /etc/bash_completion.d/pdm.bash-completion 1 2 # Make sure ~/.zfunc is added to fpath, before compinit. pdm completion zsh > ~/.zfunc/_pdm Oh-My-Zsh: 1 2 mkdir $ZSH_CUSTOM /plugins/pdm pdm completion zsh > $ZSH_CUSTOM /plugins/pdm/_pdm Then make sure pdm plugin is enabled in ~/.zshrc 1 pdm completion fish > ~/.config/fish/completions/pdm.fish 1 2 3 4 5 6 7 8 9 10 # Create a directory to store completion scripts mkdir $PROFILE \\..\\ Completions echo @' Get-ChildItem \"$PROFILE\\..\\Completions\\\" | ForEach-Object { . $_.FullName } '@ | Out-File -Append -Encoding utf8 $PROFILE # Generate script Set-ExecutionPolicy Unrestricted -Scope CurrentUser pdm completion powershell | Out-File -Encoding utf8 $PROFILE \\..\\ Completions \\ pdm_completion . ps1","title":"Shell Completion"},{"location":"#unicode-and-ansi-supports","text":"PDM provides a fancy terminal UI with the help of ANSI characters and unicode emojis. It can turn on/off automatically depending on whether it is supported on your terminal. However, if you see any garbled characters, set env var DISABLE_UNICODE_OUTPUT=1 to turn off it.","title":"Unicode and ANSI supports"},{"location":"#use-with-ide","text":"Now there are not built-in support or plugins for PEP 582 in most IDEs, you have to configure your tools manually. PDM will write and store project-wide configurations in .pdm.toml and you are recommended to add following lines in the .gitignore : 1 2 .pdm.toml __pypackages__/","title":"Use with IDE"},{"location":"#pycharm","text":"Mark __pypackages__/<major.minor>/lib as Sources Root . Then, select as Python interpreter a Python installation with the same <major.minor> version. Additionally, if you want to use tools from the environment (e.g. pytest ), you have to add the __pypackages__/<major.minor>/bin directory to the PATH variable in the corresponding run/debug configuration.","title":"PyCharm"},{"location":"#vscode","text":"Add the following two entries to the top-level dict in .vscode/settings.json : 1 2 3 4 { \"python.autoComplete.extraPaths\" : [ \"__pypackages__/<major.minor>/lib\" ], \"python.analysis.extraPaths\" : [ \"__pypackages__/<major.minor>/lib\" ] } Enable PEP582 globally , and make sure VSCode runs using the same user and shell you enabled PEP582 for. Cannot enable PEP582 globally? If for some reason you cannot enable PEP582 globally, you can still configure each \"launch\" in each project: set the PYTHONPATH environment variable in your launch configuration, in .vscode/launch.json . For example, to debug your pytest run: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"pytest\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"module\" : \"pytest\" , \"args\" : [ \"tests\" ], \"justMyCode\" : false , \"env\" : { \"PYTHONPATH\" : \"__pypackages__/<major.minor>/lib\" } } ] } If your package resides in a src directory, add it to PYTHONPATH as well: 1 \"env\" : { \"PYTHONPATH\" : \"src:__pypackages__/<major.minor>/lib\" } Using Pylance/Pyright? If you have configured \"python.analysis.diagnosticMode\": \"workspace\" , and you see a ton of errors/warnings as a result. you may need to create pyrightconfig.json in the workspace directory, and fill in the following fields: 1 2 3 { \"exclude\" : [ \"__pypackages__\" ] } Then restart the language server or VS Code and you're good to go. In the future ( microsoft/pylance-release#1150 ), maybe the problem will be solved. Using Jupyter Notebook? If you wish to use pdm to install jupyter notebook and use it in vscode in conjunction with the python extension: Use pdm add notebook or so to install notebook Add a .env file inside of your project director with contents like the following: 1 PYTHONPATH=/your-workspace-path/__pypackages__/<major>.<minor>/lib If the above still doesn't work, it's most likely because the environment variable is not properly loaded when the Notebook starts. There are two workarounds. Run code . in Terminal. It will open a new VSCode window in the current directory with the path set correctly. Use the Jupyter Notebook in the new window If you prefer not to open a new window, run the following at the beginning of your Jupyter Notebook to explicitly set the path: 1 2 import sys sys.path.append('/your-workspace-path/__pypackages__/<major>.<minor>/lib') Reference Issue","title":"VSCode"},{"location":"#task-provider","text":"In addition, there is a VSCode Task Provider extension available for download. This makes it possible for VSCode to automatically detect pdm scripts so they can be run natively as VSCode Tasks .","title":"Task Provider"},{"location":"#neovim","text":"If using neovim-lsp with pyright and want your __pypackages__ directory to be added to the path, you can add this to your project's pyproject.toml . 1 2 [tool.pyright] extraPaths = [ \"__pypackages__/<major.minor>/lib/\" ]","title":"Neovim"},{"location":"#seek-for-other-ides-or-editors","text":"","title":"Seek for other IDEs or editors"},{"location":"#pdm-eco-system","text":"Awesome PDM is a curated list of awesome PDM plugins and resources.","title":"PDM Eco-system"},{"location":"configuration/","text":"Available Configurations # The following configuration items can be retrieved and modified by pdm config command. Config Item Description Default Value Available in Project Env var build_isolation Isolate the build environment from the project environment Yes True PDM_BUILD_ISOLATION cache_dir The root directory of cached files The default cache location on OS No check_update Check if there is any newer version available True No global_project.fallback Use the global project implicitly if no local project is found False No global_project.path The path to the global project ~/.pdm/global-project No global_project.user_site Whether to install to user site False No install.cache Enable caching of wheel installations False Yes install.cache_method Specify how to create links to the caches( symlink or pth ) symlink Yes install.parallel Whether to perform installation and uninstallation in parallel True Yes PDM_PARALLEL_INSTALL project_max_depth The max depth to search for a project through the parents 5 No PDM_PROJECT_MAX_DEPTH python.path The Python interpreter path Yes PDM_PYTHON python.use_pyenv Use the pyenv interpreter True Yes python.use_venv Install packages into the activated venv site packages instead of PEP 582 False Yes PDM_USE_VENV pypi.url The URL of PyPI mirror Read index-url in pip.conf , or https://pypi.org/simple if not found Yes PDM_PYPI_URL pypi.verify_ssl Verify SSL certificate when query PyPI Read trusted-hosts in pip.conf , defaults to True Yes pypi.json_api Consult PyPI's JSON API for package metadata False Yes PDM_PYPI_JSON_API strategy.save Specify how to save versions when a package is added compatible (can be: exact , wildcard , minimum ) Yes strategy.update The default strategy for updating packages reuse (can be : eager ) Yes strategy.resolve_max_rounds Specify the max rounds of resolution process 1000 Yes PDM_RESOLVE_MAX_ROUNDS If the corresponding env var is set, the value will take precedence over what is saved in the config file.","title":"Configuration"},{"location":"configuration/#available-configurations","text":"The following configuration items can be retrieved and modified by pdm config command. Config Item Description Default Value Available in Project Env var build_isolation Isolate the build environment from the project environment Yes True PDM_BUILD_ISOLATION cache_dir The root directory of cached files The default cache location on OS No check_update Check if there is any newer version available True No global_project.fallback Use the global project implicitly if no local project is found False No global_project.path The path to the global project ~/.pdm/global-project No global_project.user_site Whether to install to user site False No install.cache Enable caching of wheel installations False Yes install.cache_method Specify how to create links to the caches( symlink or pth ) symlink Yes install.parallel Whether to perform installation and uninstallation in parallel True Yes PDM_PARALLEL_INSTALL project_max_depth The max depth to search for a project through the parents 5 No PDM_PROJECT_MAX_DEPTH python.path The Python interpreter path Yes PDM_PYTHON python.use_pyenv Use the pyenv interpreter True Yes python.use_venv Install packages into the activated venv site packages instead of PEP 582 False Yes PDM_USE_VENV pypi.url The URL of PyPI mirror Read index-url in pip.conf , or https://pypi.org/simple if not found Yes PDM_PYPI_URL pypi.verify_ssl Verify SSL certificate when query PyPI Read trusted-hosts in pip.conf , defaults to True Yes pypi.json_api Consult PyPI's JSON API for package metadata False Yes PDM_PYPI_JSON_API strategy.save Specify how to save versions when a package is added compatible (can be: exact , wildcard , minimum ) Yes strategy.update The default strategy for updating packages reuse (can be : eager ) Yes strategy.resolve_max_rounds Specify the max rounds of resolution process 1000 Yes PDM_RESOLVE_MAX_ROUNDS If the corresponding env var is set, the value will take precedence over what is saved in the config file.","title":"Available Configurations"},{"location":"dev/benchmark/","text":"Benchmark # Run the benchmarking script # 1 pdm run benchmark Benchmark results # Environment # GitHub Actions Ubuntu 21.04 virtual environment(2C8G). Base dependency set # (The format varies on different tools.) 1 2 3 requests @ git+https://github.com/psf/requests.git@v2.25.0 # a VCS dependency pandas>=1.2.5,<2 # a package with heavy prebuilt binaries pytest~=5.2 # a package with many child dependencies Result # (The time elapse is not averaged over multiple runs. One may expect some differences between runs.) Highcharts.chart('container', { chart: { type: 'column' }, title: { text: 'Benchmark' }, xAxis: { categories: [ 'Lock', 'Lock+cache', 'Install', 'Add', 'Add+cache' ], crosshair: true }, yAxis: { min: 0, title: { text: 'Time (s)' } }, tooltip: { headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>', pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' + '<td style=\"padding:0\"><b>{point.y:.1f}s</b></td></tr>', footerFormat: '</table>', shared: true, useHTML: true }, plotOptions: { column: { pointPadding: 0.2, borderWidth: 0 } }, series: [{ name: 'Pipenv', data: [46.43, 55.81, 25.16, 84.44, 83.33] }, { name: 'Poetry', data: [76.95, 39.08, 17.82, 37.24, 43.90] }, { name: 'PDM', data: [27.56, 21.91, 12.16, 37.26, 26.84] }] }); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Running benchmark: pipenv, version 2021.11.23 Lock dependencies without cache: 46.43s Lock dependencies with cache: 55.81s Install dependencies: 25.16s Add dependencies with cache: 83.33s Add dependencies without cache: 84.44s Running benchmark: Poetry version 1.1.12 Lock dependencies without cache: 76.95s Lock dependencies with cache: 39.08s Install dependencies: 17.82s Add dependencies with cache: 43.90s Add dependencies without cache: 37.24s Running benchmark: Python Development Master (PDM), version 1.11.2 Lock dependencies without cache: 27.56s Lock dependencies with cache: 21.91s Install dependencies: 12.16s Add dependencies with cache: 26.84s Add dependencies without cache: 37.26s Comments: Install Dependencies is to sync the working set with the lock file. Add Dependencies is to add the dependencies to the working set and existing lock file. Poetry's command is poetry add , Pipenv's command is pipenv install --keep-outdated and PDM's command is pdm add","title":"Benchmark"},{"location":"dev/benchmark/#benchmark","text":"","title":"Benchmark"},{"location":"dev/benchmark/#run-the-benchmarking-script","text":"1 pdm run benchmark","title":"Run the benchmarking script"},{"location":"dev/benchmark/#benchmark-results","text":"","title":"Benchmark results"},{"location":"dev/benchmark/#environment","text":"GitHub Actions Ubuntu 21.04 virtual environment(2C8G).","title":"Environment"},{"location":"dev/benchmark/#base-dependency-set","text":"(The format varies on different tools.) 1 2 3 requests @ git+https://github.com/psf/requests.git@v2.25.0 # a VCS dependency pandas>=1.2.5,<2 # a package with heavy prebuilt binaries pytest~=5.2 # a package with many child dependencies","title":"Base dependency set"},{"location":"dev/benchmark/#result","text":"(The time elapse is not averaged over multiple runs. One may expect some differences between runs.) Highcharts.chart('container', { chart: { type: 'column' }, title: { text: 'Benchmark' }, xAxis: { categories: [ 'Lock', 'Lock+cache', 'Install', 'Add', 'Add+cache' ], crosshair: true }, yAxis: { min: 0, title: { text: 'Time (s)' } }, tooltip: { headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>', pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' + '<td style=\"padding:0\"><b>{point.y:.1f}s</b></td></tr>', footerFormat: '</table>', shared: true, useHTML: true }, plotOptions: { column: { pointPadding: 0.2, borderWidth: 0 } }, series: [{ name: 'Pipenv', data: [46.43, 55.81, 25.16, 84.44, 83.33] }, { name: 'Poetry', data: [76.95, 39.08, 17.82, 37.24, 43.90] }, { name: 'PDM', data: [27.56, 21.91, 12.16, 37.26, 26.84] }] }); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Running benchmark: pipenv, version 2021.11.23 Lock dependencies without cache: 46.43s Lock dependencies with cache: 55.81s Install dependencies: 25.16s Add dependencies with cache: 83.33s Add dependencies without cache: 84.44s Running benchmark: Poetry version 1.1.12 Lock dependencies without cache: 76.95s Lock dependencies with cache: 39.08s Install dependencies: 17.82s Add dependencies with cache: 43.90s Add dependencies without cache: 37.24s Running benchmark: Python Development Master (PDM), version 1.11.2 Lock dependencies without cache: 27.56s Lock dependencies with cache: 21.91s Install dependencies: 12.16s Add dependencies with cache: 26.84s Add dependencies without cache: 37.26s Comments: Install Dependencies is to sync the working set with the lock file. Add Dependencies is to add the dependencies to the working set and existing lock file. Poetry's command is poetry add , Pipenv's command is pipenv install --keep-outdated and PDM's command is pdm add","title":"Result"},{"location":"dev/changelog/","text":"Change Log # Release v1.15.3 (2022-06-14) # Bug Fixes # Fix a defect in the resolution preferences that causes an infinite resolution loop. #1119 Update the poetry importer to support the new [tool.poetry.build] config table. #1131 Improved Documentation # Add support for multiple versions of documentations. #1126 Release v1.15.2 (2022-06-06) # Bug Fixes # Fix bug where SIGINT is sent to the main pdm process and not to the process actually being run. #1095 Fix a bug due to the build backend fallback, which causes different versions of the same requirement to exist in the build environment, making the building unstable depending on which version being used. #1099 Don't include the version in the cache key of the locked candidates if they are from a URL requirement. #1099 Fix a bug where dependencies with requires-python pre-release versions caused pdm update to fail with InvalidPyVersion . #1111 Release v1.15.1 (2022-06-02) # Bug Fixes # Fix a bug that dependencies are missing from the dep graph when they are depended by a requirement with extras. #1097 Give a default version if the version is dynamic in setup.cfg or setup.py . #1101 Fix a bug that the hashes for file URLs are not included in the lock file. #1103 Fix a bug that package versions are updated even when they are excluded by pdm update command. #1104 Prefer venv install scheme when available. This scheme is more stable than posix_prefix scheme since the latter is often patched by distributions. #1106 Miscellany # Move the test artifacts to a submodule. It will make it easier to package this project. #1084 Release v1.15.0 (2022-05-16) # Features & Improvements # Allow specifying lockfile other than pdm.lock by --lockfile option or PDM_LOCKFILE env var. #1038 Bug Fixes # Replace the editable entry in pyproject.toml when running pdm add --no-editable <package> . #1050 Ensure the pip module inside venv in installation script. #1053 Fix the py2 compatibility issue in the in-process get_sysconfig_path.py script. #1056 Fix a bug that file paths in URLs are not correctly unquoted. #1073 Fix a bug on Python 3.11 that overriding an existing command from plugins raises an error. #1075 Replace the ${PROJECT_ROOT} variable in the result of export command. #1079 Removals and Deprecations # Show a warning if Python 2 interpreter is being used and remove the support on 2.0. #1082 Release v1.14.1 (2022-04-21) # Features & Improvements # Ask for description when doing pdm init and create default README for libraries. #1041 Bug Fixes # Fix a bug of missing subdirectory fragment when importing from a requirements.txt . #1036 Fix use_cache.json with corrupted python causes pdm use error. #1039 Ignore the optional key when converting from Poetry's dependency entries. #1042 Improved Documentation # Clarify documentation on enabling PEP582 globally. #1033 Release v1.14.0 (2022-04-08) # Features & Improvements # Editable installations won't be overridden unless --no-editable is passed. pdm add --no-editable will now override the editable mode of the given packages. #1011 Re-calculate the file hashes when running pdm lock --refresh . #1019 Bug Fixes # Fix a bug that requirement with extras isn't resolved to the version as specified by the range. #1001 Replace the ${PROJECT_ROOT} in the output of pdm list . #1004 Further fix the python path issue of MacOS system installed Python. #1023 Fix the install path issue on Python 3.10 installed from homebrew. #996 Improved Documentation # Document how to install PDM inside a project with Pyprojectx. #1004 Dependencies # Support installer 0.5.x . #1002 Release v1.13.6 (2022-03-28) # Bug Fixes # Default the optional license field to \"None\". #991 Don't create project files in pdm search command. #993 Fix a bug that the env vars in source urls in exported result are not expanded. #997 Release v1.13.5 (2022-03-23) # Features & Improvements # Users can change the install destination of global project to the user site( ~/.local ) with global_project.user_site config. #885 Make the path to the global project configurable. Rename the configuration auto_global to global_project.fallback and deprecate the old name. #986 Bug Fixes # Fix the compatibility when fetching license information in show command. #966 Don't follow symlinks for the paths in the requirement strings. #976 Use the default install scheme when installing build requirements. #983 Fix a bug that _.site_packages is overridden by default option value. #985 Release v1.13.4 (2022-03-09) # Features & Improvements # Update the dependency pdm-pep517 to support PEP 639. #959 Bug Fixes # Filter out the unmatched python versions when listing the available versions. #941 Fix a bug displaying the available python versions. #943 Fix a bug under non-UTF8 console encoding. #960 Fix a bug that data files are not copied to the destination when using installation cache. #961 Release v1.13.3 (2022-02-24) # Bug Fixes # Fix a bug that VCS repo name are parsed as the package name. #928 Support prerelease versions for global projects. #932 Fix a bug that VCS revision in the lock file isn't respected when installing. #933 Dependencies # Switch from pythonfinder to findpython as the Python version finder. #930 Release v1.13.2 (2022-02-20) # Bug Fixes # Fix a regression issue that prereleases can't be installed if the version specifier of the requirement doesn't imply that. #920 Release v1.13.1 (2022-02-18) # Bug Fixes # Fix a bug that bad pip cache dir value breaks PDM's check update function. #922 Fix a race condition in parallel installation by changing metadata to a lazy property. This fixes a bug that incompatible wheels are installed unexpectedly. #924 Release v1.13.0.post0 (2022-02-18) # Bug Fixes # Fix a bug that incompatible platform-specific wheels are installed. #921 Release v1.13.0 (2022-02-18) # Features & Improvements # Support pre_* and post_* scripts for task composition. Pre- and Post- scripts for init , build , install and lock will be run if present. #789 Support --config/-c option to specify another global configuration file. #883 Packages with extras require no longer inherit the dependencies from the same package without extras. It is because the package without extras are returned as one of the dependencies. This change won't break the existing lock files nor dependency cache. #892 Support version ranges in [tool.pdm.overrides] table. #909 Rename config use_venv to python.use_venv ; rename config feature.install_cache to install.cache ; rename config feature.install_cache_method to install.cache_method ; rename config parallel_install to install.parallel . #914 Bug Fixes # Fix a bug that file URLs or VCS URLs don't work in [tool.pdm.overrides] table. #861 Fix a bug of identifier mismatch for URL requirements without an explicit name. #901 No requires-python should be produced if ANY( * ) is given. #917 Fix a bug that pdm.lock gets created when --dry-run is passed to pdm add . #918 Improved Documentation # The default editable backend becomes path . #904 Removals and Deprecations # Stop auto-migrating projects from PDM 0.x format. #912 Refactor # Rename ExtrasError to ExtrasWarning for better understanding. Improve the warning message. #892 Extract the environment related code from Candidate into a new class PreparedCandidate . Candidate no longer holds an Environment instance. #920 Release v1.12.8 (2022-02-06) # Features & Improvements # Print the error and continue if a plugin fails to load. #878 Bug Fixes # PDM now ignores configuration of uninstalled plugins. #872 Fix the compatibility issue with pip>=22.0 . #875 Release v1.12.7 (2022-01-31) # Features & Improvements # If no command is given to pdm run , it will run the Python REPL. #856 Bug Fixes # Fix the hash calculation when generating direct_url.json for a local pre-built wheel. #861 PDM no longer migrates project meta silently. #867 Dependencies # Pin pip<22.0 . #874 Miscellany # Reduce the number of tests that require network, and mark the rest with network marker. #858 Release v1.12.6 (2022-01-12) # Bug Fixes # Fix a bug that cache dir isn't created. #843 Release v1.12.5 (2022-01-11) # Bug Fixes # Fix a resolution error that dots in the package name are normalized to - unexpectedly. #853 Release v1.12.4 (2022-01-11) # Features & Improvements # Remember the last selection in use command to save the human effort. And introduce an -i option to ignored that remembered value. #846 Bug Fixes # Fix a bug of uninstall crash when the package has directories in RECORD . #847 Fix the ModuleNotFoundError during uninstall when the modules required are removed. #850 Release v1.12.3 (2022-01-07) # Features & Improvements # Support setting Python path in global configuration. #842 Bug Fixes # Lowercase the package names in the lock file make it more stable. #836 Show the packages to be updated in dry run mode of pdm update even if --no-sync is passed. #837 Improve the robustness of update check code. #841 Fix a bug that export result has environment markers that don't apply for all requirements. #843 Release v1.12.2 (2021-12-30) # Features & Improvements # Allow changing the installation linking method by feature.install_cache_method config. #822 Bug Fixes # Fix a bug that namespace packages can't be symlinked to the cache due to existing links. #820 Make PDM generated pth files processed as early as possible. #821 Fix a UnicodeDecodeError for subprocess logger under Windows/GBK. #823 Release v1.12.1 (2021-12-24) # Bug Fixes # Don't symlink pycaches to the target place. #817 Release v1.12.0 (2021-12-22) # Features & Improvements # Add lock --refresh to update the hash stored with the lock file without updating the pinned versions. #642 Support resolution overriding in the [tool.pdm.overrides] table. #790 Add support for signals for basic operations, now including post_init , pre_lock , post_lock , pre_install and post_install . #798 Add install --check to check if the lock file is up to date. #810 Use symlinks to cache installed packages when it is supported by the file system. #814 Bug Fixes # Fix a bug that candidates from urls are rejected by the allow_prereleases setting. Now non-named requirements are resolved earlier than pinned requirements. #799 Improved Documentation # Add a new doc page: API reference . #802 Dependencies # Switch back from atoml to tomlkit as the style-preserving TOML parser. The latter has supported TOML v1.0.0. #809 Miscellany # Cache the latest version of PDM for one week to reduce the request frequency. #800 Release v1.11.3 (2021-12-15) # Features & Improvements # Change the default version save strategy to minimum , without upper bounds. #787 Bug Fixes # Fix the patching of sysconfig in PEP 582 initialization script. #796 Miscellany # Fix an installation failure of the bootstrap script on MacOS Catalina. #793 Add a basic benchmarking script. #794 Release v1.11.2 (2021-12-10) # Bug Fixes # Fix the resolution order to reduce the loop number to find a conflict. #781 Patch the functions in sysconfig to return the PEP 582 scheme in pdm run . #784 Dependencies # Remove the upper bound of version constraints for most dependencies, except for some zero-versioned ones. #787 Release v1.11.1 (2021-12-08) # Features & Improvements # Support --pre/--prelease option for pdm add and pdm update . It will allow prereleases to be pinned. #774 Improve the error message when python is found but not meeting the python requirement. #777 Bug Fixes # Fix a bug that git+https candidates cannot be resolved. #771 Fix an infinite resolution loop by resolving the top-level packages first. Also deduplicate the lines from the same requirement in the error output. #776 Miscellany # Fix the install script to use a zipapp of virtualenv when it isn't installed. #780 Release v1.11.0 (2021-11-30) # Features & Improvements # Move version from [project] table to [tool.pdm] table, delete classifiers from dynamic , and warn usage about the deprecated usages. #748 Add support for Conda environments in addition to Python virtual environments. #749 Add support for saving only the lower bound x >= VERSION when adding dependencies. #752 Improve the error message when resolution fails. #754 Bug Fixes # Switch to self-implemented pdm list --freeze to fix a bug due to Pip's API change. #533 Fix an infinite loop issue when resolving candidates with incompatible requires-python . #744 Fix the python finder to support pyenv-win. #745 Fix the ANSI color output for Windows cmd and Powershell terminals. #753 Removals and Deprecations # Remove -s/--section option from all previously supported commands. Use -G/--group instead. #756 Release v1.10.3 (2021-11-18) # Bug Fixes # Use importlib to replace imp in the sitecustomize module for Python 3. #574 Fix the lib paths under non-isolated build. #740 Exclude the dependencies with extras in the result of pdm export . #741 Release v1.10.2 (2021-11-14) # Features & Improvements # Add a new option -s/--site-packages to pdm run as well as a script config item. When it is set to True , site-packages from the selected interpreter will be loaded into the running environment. #733 Bug Fixes # Now NO_SITE_PACKAGES isn't set in pdm run if the executable is out of local packages. #733 Release v1.10.1 (2021-11-09) # Features & Improvements # Isolate the project environment with system site packages in pdm run , but keep them seen when PEP 582 is enabled. #708 Bug Fixes # Run pip with --isolated when building wheels. In this way some env vars like PIP_REQUIRE_VIRTUALENV can be ignored. #669 Fix the install script to ensure pip is not DEBUNDLED. #685 Fix a bug that when summary is None , the lockfile can't be generated. #719 ${PROJECT_ROOT} should be written in the URL when relative path is given. #721 Fix a bug that when project table already exists, pdm import can't merge the settings correctly. #723 Release v1.10.0 (2021-10-25) # Features & Improvements # Add --no-sync option to update command. #684 Support find_links source type. It can be specified via type key of [[tool.pdm.source]] table. #694 Add --dry-run option to add , install and remove commands. #698 Bug Fixes # Remove trailing whitespace with terminal output of tables (via project.core.ui.display_columns ), fixing unnecessary wrapping due to / with empty lines full of spaces in case of long URLs in the last column. #680 Include files should be installed under venv's base path. #682 Ensure the value of check_update is boolean. #689 Improved Documentation # Update the contributing guide, remove the usage of setup_dev.py in favor of pip install . #676 Release v1.9.0 (2021-10-12) # Bug Fixes # Fix a bug that requires-python is not recognized in candidates evaluation. #657 Fix the path order when pdm run so that executables in local packages dir are found first. #678 Dependencies # Update installer to 0.3.0 , fixing a bug that broke installation of some packages with unusual wheel files. #653 Change packaging and typing-extensions to direct dependencies. #674 Refactor # requires-python now participates in the resolution as a dummy requirement. #658 Release v1.8.5 (2021-09-16) # Bug Fixes # Fix the error of regex to find the shebang line. #656 Release v1.8.4 (2021-09-15) # Features & Improvements # Support --no-isolation option for install , lock , update , remove , sync commands. #640 Make project_max_depth configurable and default to 5 . #643 Bug Fixes # Don't try pdm-pep517 backend on Python 2.7 when installing self as editable. #640 Fix a bug that existing shebang can't be replaced correctly. #651 Fix the version range saving for prerelease versions. #654 Release v1.8.3 (2021-09-07) # Features & Improvements # Allow to build in non-isolated environment, to enable optional speedups depending on the environment. #635 Bug Fixes # Don't copy *-nspkg.pth files in install_cache mode. It will still work without them. #623 Release v1.8.2 (2021-09-01) # Bug Fixes # Fix the removal issue of standalone pyc files #633 Release v1.8.1 (2021-08-26) # Features & Improvements # Add -r/--reinstall option to sync command to force re-install the existing dependencies. #601 Show update hint after every pdm command. #603 pdm cache clear can clear cached installations if not needed any more. #604 Bug Fixes # Fix the editable install script so that setuptools won't see the dependencies under local packages. #601 Preserve the executable bit when installing wheels. #606 Write PEP 610 metadata direct_url.json when installing wheels. #607 Fix a bug that * fails to be converted as SpecifierSet . #609 Refactor # Build editable packages are into wheels via PEP 660 build backend. Now all installations are unified into wheels. #612 Release v1.8.0 (2021-08-16) # Features & Improvements # Added a new mode --json to the list command which outputs the dependency graph as a JSON document. #583 Add a new config feature.install_cache . When it is turned on, wheels will be installed into a centralized package repo and create .pth files under project packages directory to link to the cached package. #589 Bug Fixes # Fix env vars in source URLs not being expanded in all cases. #570 Fix the weird output of pdm show . #580 Prefer ~/.pyenv/shims/python3 as the pyenv interpreter. #590 Fix a bug that installing will download candidates that do not match the locked hashes. #596 Improved Documentation # Added instructions to the Contributing section for creating news fragments #573 Removals and Deprecations # Deprecate -s/--section option in favor of -G/--group . #591 Refactor # Switch to a self-implemented version of uninstaller. #586 pdm/installers/installers.py is renamed to pdm/installers/manager.py to be more accurate. The Installer class under that file is renamed to InstallerManager and is exposed in the pdm.core.Core object for overriding. The new pdm/installers/installers.py contains some installation implementations. #589 Switch from pkg_resources.Distribution to the implementation of importlib.metadata . #592 Release v1.7.2 (2021-07-30) # Bug Fixes # Remove the existing files before installing. #565 Deduplicate the plugins list. #566 Release v1.7.1 (2021-07-29) # Bug Fixes # Accept non-canonical distribution name in the wheel's dist-info directory name. #529 Prefer requirements with narrower version constraints or allowing prereleases to find matches. #551 Use the underlying real executable path for writing shebangs. #553 Fix a bug that extra markers cannot be extracted when combined with other markers with \"and\". #559 Fix a bug that redacted credentials in source urls get overwritten with the plain text after locking. #561 Refactor # Use installer as the wheel installer, replacing distlib . #519 Release v1.7.0 (2021-07-20) # Features & Improvements # Support showing individual fields by --<field-name> options in pdm show. When no package is given, show this project. #527 Add --freeze option to pdm list command which shows the dependencies list as pip's requirements.txt format. #531 Bug Fixes # Fix the path manipulation on Windows, now the PEP 582 path is prepended to the PYTHONPATH . #522 Fix the handling of auth prompting: will try keyring in non-verbose mode. #523 Recognize old entry point name \"pdm.plugin\" for backward-compatibility. #530 Match the VCS scheme in case-insensitive manner. #537 Use the default permission bits when writing project files. #542 Fix the VCS url to be consistent between lock and install. #547 Improved Documentation # Add installation instructions for Scoop. #522 Dependencies # Update pdm-pep517 to 0.8.0 . #524 Switch from toml to tomli . #541 Refactor # Separate the build env into two different levels for better caching. #541 Refactor the build part into smaller functions. #543 Release v1.6.4 (2021-06-23) # Features & Improvements # Extract package name from egg-info in filename when eligible. Remove the patching code of resolvelib's inner class. #441 Support installing packages from subdiretories of VCS repository. #507 Add an install script to bootstrap PDM quickly without help of other tools. Modify docs to recommend this installation method. #508 Add a new subcommand plugin to manage pdm plugins, including add , remove and list commands. #510 Bug Fixes # Don't monkeypatch the internal class of resolvelib any more. This makes PDM more stable across updates of sub-dependencies. #515 Miscellany # Clear the type errors from mypy. #261 Release v1.6.3 (2021-06-17) # Features & Improvements # Add an option -u/--unconstrained to support unconstraining version specifiers when adding packages. #501 Bug Fixes # Fix the format of dependency arrays when a new value is appended. #487 Allow missing email attribute for authors and maintainers. #492 Fix a bug that editable install shouldn't require pyproject.toml to be valid. #497 Fix a bug on MacOS that purelib and platlib paths of isolated build envs cannot be substituted correctly if the Python is a framework build. #502 Fix the version sort of candidates. #506 Release v1.6.2 (2021-05-31) # No significant changes. Release v1.6.1 (2021-05-31) # No significant changes. Release v1.6.0 (2021-05-31) # Features & Improvements # Use a new approach to determine the packages to be installed. This requires a quick resolution step before installation. #456 pdm export no longer produces requirements file applicable for all platforms due to the new approach. #456 Add structural typing for requirements module. Refactor the requirements module for that purpose. #433 Introduce --no-editable option to install non-editable versions of all packages. #443 Introduce --no-self option to prevent the project itself from being installed. #444 Add a default .gitignore file in the __pypackages__ directory. #446 Check if the lock file version is compatible with PDM program before installation. #463 Expose the project root path via PDM_PROJECT_ROOT env var. Change to the project root when executing scripts. #470 Fix a bug that installation resolution doesn't respect the requirement markers from pyproject config. #480 Bug Fixes # Changing to multiline breaks the parsing of TOML document. #462 Fix a bug that transient dependencies of conditional requirements can't be resolved. #472 Fix a bug that invalid wheels are rejected while they are acceptable for resolution. #473 Fix a bug that build environment is not fully isolated with the hosted environment. #477 Ensure the lock file is compatible before looking for the locked candidates. #484 Improved Documentation # Fix 404 links in documentation. #472 Dependencies # Migrate from tomlkit to atoml as the style-preserving TOML parser and writer. #465 Removals and Deprecations # Remove the warning of --dev flag for older versions of PDM. #444 Miscellany # Add Python 3.10 beta CI job. #457 Release v1.5.3 (2021-05-10) # Features & Improvements # Support passing options to the build backends via --config-setting . #452 Bug Fixes # Seek for other sitecustomize.py to import. #422 Fix an unescaped single quote in fish completion script. #423 The hashes of a remote file candidate should be calculated from the link itself. #450 Dependencies # Remove keyring as a dependency and guide users to install it when it is not available. #442 Specify the minimum version of distlib . #447 Miscellany # Add log output about found candidates and their origin. #421 Add mypy pre-commit hook #427 Improve type safety of pdm.cli.actions #428 Fix wrong mypy configuration. #451 Release v1.5.2 (2021-04-27) # Features & Improvements # Allow pdm use with no argument given, which will list all available pythons for pick. #409 Bug Fixes # Inform user to enable PEP 582 for development script to work. #404 Check the existence of pyenv shim Python interpreter before using it. #406 Fix a bug that executing setup.py failed for NameError. #407 Check before setting the PYTHONPATH environment variable for PEP582 #410 Fix development setup error. #415 Dependencies # Update pip to 21.1 and fix compatibility issues. #412 Release v1.5.1 (2021-04-22) # Bug Fixes # Make func translate_sections pure to avoid exporting requirements in random order. #401 Expand the variables in install requirements' attributes for build. #402 Release v1.5.0 (2021-04-20) # Features & Improvements # Include dev dependencies by default for install and sync commands. Add a new option --prod/--production to exclude them. Improve the dependency selection logic to be more convenient to use \u2014 the more common the usage is, the shorter the command is. #391 Bug Fixes # Enquote executable path to ensure generating valid scripts. #387 Consider hashes when fetching artifact link for build. #389 Considier the sources settings when building. #399 Improved Documentation # New pdm setting source-includes to mark files to be included only in sdist builds. #390 Dependencies # Update pdm-pep517 to 0.7.0 ; update resolvelib to 0.7.0 . #390 Removals and Deprecations # Deprecate the usage of -d/--dev option in install and sync commands. #391 Release v1.5.0b1 (2021-04-12) # Features & Improvements # Improve the env builder to run in isolated mode. #384 Bug Fixes # Remove the incompatible code from the files that will be run in-process. #375 Get the correct Python ABI tag of selected interpreter #378 Error out when doing pdm run on a directory not initialized yet. Give warning message when the project automatically fallbacks to the global project. Dependencies # Upgrade resolvelib to 0.6.0 . #381 Miscellany # refactor pdm.models.readers to improve typing support #321 Add a basic integration test for cross-python check. #377 Refactor the project.python_executable to project.python that contains all info of the interpreter. #382 Continue refactoring Python info to extract to its own module. #383 Refactor the creation of project. Release v1.5.0b0 (2021-04-03) # Features & Improvements # Add hand-written zsh completion script. #188 Add a special value :all given to -s/--section to refer to all sections under the same species. Adjust add , sync , install , remove and update to support the new dev-dependencies groups. Old behavior will be kept the same. #351 dev-dependencies is now a table of dependencies groups, where key is the group name and value is an array of dependencies. These dependencies won't appear in the distribution's metadata. dev-depedencies of the old format will turn into dev group under dev-dependencies . #351 Move dev-dependencies , includes , excludes and package-dir out from [project] table to [tool.pdm] table. The migration will be done automatically if old format is detected. #351 Throws an error with meaningful message when no candidate is found for one requirement. #357 Support --dry-run option for update command to display packages that need update, install or removal. Add --top option to limit to top level packages only. #358 Full-featured completion scripts for Zsh and Powershell - section selection, package name autocompletion and so on. Windows is a first-class citizen! #367 Support non-interactive init command via -n/--non-interactive option. No question will be asked in this mode. #368 Show project packages path(PEP 582) in the output of pdm info , also add an option --packages to show that value only. #372 Bug Fixes # Fix a bug that pure python libraries are not loaded to construct the WorkingSet. #346 Don't write <script>-X.Y variant to the bin folder. #365 Python is now run in isolated mode via subprocess to avoid accidentally importing user packages. #369 Don't overwrite existing dependencies when importing from requirements.txt. #370 Improved Documentation # Add instructions of how to integrate PDM with Emacs, contributed by @linw1995. #372 Removals and Deprecations # Remove the support of project path following -g/--global that was deprecated in 1.4.0 . One should use -g -p <project_path> for that purpose. #361 Miscellany # Add test coverage to PDM. #109 Add type annotations into untyped functions to start using mypy. #354 Refactor the format converter code to be more explicit. #360 Release v1.4.5 (2021-03-30) # Features & Improvements # Skip the first prompt of pdm init #352 Bug Fixes # Fix a test failure when using homebrew installed python. #348 Get revision from the VCS URL if source code isn't downloaded to local. #349 Dependencies # Update dependency pdm-pep517 to 0.6.1 . #353 Release v1.4.4 (2021-03-27) # Features & Improvements # Emit warning if version or description can't be retrieved when importing from flit metadata. #342 Add type argument to pdm cache clear and improve its UI. #343 Always re-install the editable packages when syncing the working set. This can help tracking the latest change of entry-points . #344 Bug Fixes # Make installer quit early if a wheel isn't able to build. #338 Miscellany # ignore type checking in models.project_info.ProjectInfo , which indexes distlib.metadata._data #335 Release v1.4.3 (2021-03-24) # Features & Improvements # Change the group name of entry points from pdm.plugins to pdm . Export some useful objects and models for shorter import path. #318 Field cmd in tools.pdm.scripts configuration items now allows specifying an argument array instead of a string. Refactor: Remove the reference of stream singleton, improve the UI related code. #320 Support dependencies managed by poetry and flit being installed as editable packages. #324 Refactor: Extract the logic of finding interpreters to method for the sake of subclass overriding. #326 Complete the cache command, add list , remove and info subcommands. #329 Refactor: Unify the code about selecting interpreter to reduce the duplication. #331 Retrieve the version and description of a flit project by parsing the AST of the main file. #333 Bug Fixes # Fix a parsing error when non-ascii characters exist in pyproject.toml . #308 Fix a bug that non-editable VCS candidates can't satisfy their requirements once locked in the lock file. #314 Fix a bug of import-on-init that fails when requirements.txt is detected. #328 Miscellany # refactor pdm.iostream to improve 'typing' support #301 fix some typos #323 Release v1.4.2 (2021-03-18) # Features & Improvements # Refactor the code, extract the version related logic from specifiers.py to a separated module. #303 Bug Fixes # Fix a bug that get_dependencies() returns error when the setup.py has no intall_requires key. #299 Pin the VCS revision for non-editable VCS candidates in the lock file. #305 Fix a bug that editable build hits the cached wheel unexpectedly. #307 Miscellany # replace 'typing comments' with type annotations throughout #298 Release v1.4.1 (2021-03-12) # Features & Improvements # Support importing dependencies from requirements.txt to dev-dependencies or sections. #291 Bug Fixes # Fallback to static parsing when building was failed to find the dependencies of a candidate. #293 Fix a bug that pdm init fails when pyproject.toml exists but has no [project] section. #295 Improved Documentation # Document about how to use PDM with Nox. #281 Release v1.4.0 (2021-03-05) # Features & Improvements # When -I/--ignore-python passed or PDM_IGNORE_SAVED_PYTHON=1 , ignore the interpreter set in .pdm.toml and don't save to it afterwards. #283 A new option -p/--project is introduced to specify another path for the project base. It can also be combined with -g/--global option. The latter is changed to a flag only option that does not accept values. #286 Support -f setuppy for pdm export to export the metadata as setup.py #289 Bug Fixes # Fix a bug that editable local package requirements cannot be parsed rightly. #285 Change the priority of metadata files to parse so that PEP 621 metadata will be parsed first. #288 Improved Documentation # Add examples of how to integrate with CI pipelines (and tox). #281 Release v1.3.4 (2021-03-01) # Improved Documentation # added documentation on a task provider for vscode #280 Bug Fixes # Ignore the python requires constraints when fetching the link from the PyPI index. Release v1.3.3 (2021-02-26) # Bug Fixes # Fix the requirement string of a VCS requirement to comply with PEP 508. #275 Fix a bug that editable packages with src directory can't be uninstalled correctly. #277 Fix a bug that editable package doesn't override the non-editable version in the working set. #278 Release v1.3.2 (2021-02-25) # Features & Improvements # Abort and tell user the selected section following pdm sync or pdm install is not present in the error message. #274 Bug Fixes # Fix a bug that candidates' sections cannot be retrieved rightly when circular dependencies exist. #270 Don't pass the help argument into the run script method. #272 Release v1.3.1 (2021-02-19) # Bug Fixes # Use the absolute path when importing from a Poetry pyproject.toml. #262 Fix a bug that old toml table head is kept when converting to PEP 621 metadata format. #263 Postpone the evaluation of requires-python attribute when fetching the candidates of a package. #264 Release v1.3.0 (2021-02-09) # Features & Improvements # Increase the default value of the max rounds of resolution to 1000, make it configurable. #238 Rewrite the project's egg-info directory when dependencies change. So that pdm list --graph won't show invalid entries. #240 When importing requirements from a requirements.txt file, build the package to find the name if not given in the URL. #245 When initializing the project, prompt user for whether the project is a library, and give empty name and version if not. #253 Bug Fixes # Fix the version validator of wheel metadata to align with the implementation of packaging . #130 Preserve the sections value of a pinned candidate to be reused. #234 Strip spaces in user input when prompting for the python version to use. #252 Fix the version parsing of Python requires to allow > , >= , < , <= to combine with star versions. #254 Release v1.2.0 (2021-01-26) # Features & Improvements # Change the behavior of --save-compatible slightly. Now the version specifier saved is using the REAL compatible operator ~= as described in PEP 440. Before: requests<3.0.0,>=2.19.1 , After: requests~=2.19 . The new specifier accepts requests==2.19.0 as compatible version. #225 Environment variable ${PROJECT_ROOT} in the dependency specification can be expanded to refer to the project root in pyproject.toml. The environment variables will be kept as they are in the lock file. #226 Change the dependencies of a package in the lock file to a list of PEP 508 strings #236 Bug Fixes # Ignore user's site and PYTHONPATH (with python -I mode) when executing pip commands. #231 Improved Documentation # Document about how to activate and use a plugin. #227 Dependencies # Test project on pip 21.0 . #235 Release v1.1.0 (2021-01-18) # Features & Improvements # Allow users to hide secrets from the pyproject.toml . Dynamically expand env variables in the URLs in dependencies and indexes. Ask whether to store the credentials provided by the user. A user-friendly error will show when credentials are not provided nor correct. #198 Use a different package dir for 32-bit installation(Windows). #212 Auto disable PEP 582 when a venv-like python is given as the interpreter path. #219 Support specifying Python interpreter by pdm use <path-to-python-root> . #221 Bug Fixes # Fix a bug of PYTHONPATH manipulation under Windows platform. #215 Removals and Deprecations # Remove support of the old PEP 517 backend API path. #217 Release v1.0.0 (2021-01-05) # Bug Fixes # Correctly build wheels for dependencies with build-requirements but without a specified build-backend #213 Release v1.0.0b2 (2020-12-29) # Features & Improvements # Fallback to pypi.org when /search endpoint is not available on given index. #211 Bug Fixes # Fix a bug that PDM fails to parse python version specifiers with more than 3 parts. #210 Release v1.0.0b0 (2020-12-24) # Features & Improvements # Fully support of PEP 621 specification. Old format is deprecated at the same time. PDM will migrate the project file for you when old format is detected. Other metadata formats( Poetry , Pipfile , flit ) can also be imported as PEP 621 metadata. #175 Re-implement the pdm search to query the /search HTTP endpoint. #195 Reuse the cached built wheels to accelerate the installation. #200 Make update strategy and save strategy configurable in pdm config. #202 Improve the error message to give more insight on what to do when resolution fails. #207 Set classifiers dynamic in pyproject.toml template for autogeneration. #209 Bug Fixes # Fix a bug that distributions are not removed clearly in parallel mode. #204 Fix a bug that python specifier is_subset() returns incorrect result. #206 Release v0.12.3 (2020-12-21) # Dependencies # Pin pdm-pep517 to <0.3.0 , this is the last version to support legacy project metadata format. Release v0.12.2 (2020-12-17) # Features & Improvements # Update the lock file schema, move the file hashes to [metadata.files] table. #196 Retry failed jobs when syncing packages. #197 Removals and Deprecations # Drop pip-shims package as a dependency. #132 Miscellany # Fix the cache path for CI. #199 Release v0.12.1 (2020-12-14) # Features & Improvements # Provide an option to export requirements from pyproject.toml #190 For Windows users, pdm --pep582 can enable PEP 582 globally by manipulating the WinReg. #191 Bug Fixes # Inject __pypackages__ into PATH env var during pdm run . #193 Release v0.12.0 (2020-12-08) # Features & Improvements # Improve the user experience of pdm run : Add a special key in tool.pdm.scripts that holds configurations shared by all scripts. Support loading env var from a dot-env file. Add a flag -s/--site-packages to include system site-packages when running. #178 Now PEP 582 can be enabled in the Python interpreter directly! #181 Bug Fixes # Ensure setuptools is installed before invoking editable install script. #174 Require wheel not wheels for global projects #182 Write a sitecustomize.py instead of a .pth file to enable PEP 582. Thanks @Aloxaf. Update get_package_finder() to be compatible with pip 20.3 . #185 Fix the help messages of commands \"cache\" and \"remove\" #187 Release v0.11.0 (2020-11-20) # Features & Improvements # Support custom script shortcuts in pyproject.toml . Support custom script shortcuts defined in [tool.pdm.scripts] section. Add pdm run --list/-l to show the list of script shortcuts. #168 Patch the halo library to support parallel spinners. Change the looking of pdm install . #169 Bug Fixes # Fix a bug that package's marker fails to propagate to its grandchildren if they have already been resolved. #170 Fix a bug that bare version specifiers in Poetry project can't be converted correctly. #172 Fix the build error that destination directory is not created automatically. #173 Release v0.10.2 (2020-11-05) # Bug Fixes # Building editable distribution does not install build-system.requires anymore. #167 Release v0.10.1 (2020-11-04) # Bug Fixes # Switch the PEP 517 build frontend from build to a home-grown version. #162 Synchronize the output of LogWrapper . #164 Fix a bug that is_subset and is_superset may return wrong result when wildcard excludes overlaps with the upper bound. #165 Release v0.10.0 (2020-10-20) # Features & Improvements # Change to Git style config command. #157 Add a command to generate scripts for autocompletion, which is backed by pycomplete . #159 Bug Fixes # Fix a bug that sitecustomize.py incorrectly gets injected into the editable console scripts. #158 Release v0.9.2 (2020-10-13) # Features & Improvements # Cache the built wheels to accelerate resolution and installation process. #153 Bug Fixes # Fix a bug that no wheel is matched when finding candidates to install. #155 Fix a bug that installation in parallel will cause encoding initialization error on Ubuntu. #156 Release v0.9.1 (2020-10-13) # Features & Improvements # Display plain text instead of spinner bar under verbose mode. #150 Bug Fixes # Fix a bug that the result of find_matched() is exhausted when accessed twice. #149 Release v0.9.0 (2020-10-08) # Features & Improvements # Allow users to combine several dependency sections to form an extra require. #131 Split the PEP 517 backend to its own(battery included) package. #134 Add a new option to list command to show reverse dependency graph. #137 Bug Fixes # Fix a bug that spaces in path causes requirement parsing error. #138 Fix a bug that requirement's python constraint is not respected when resolving. #141 Dependencies # Update pdm-pep517 to 0.2.0 that supports reading version from SCM. #146 Miscellany # Add Python 3.9 to the CI version matrix to verify. #144 Release v0.8.7 (2020-09-04) # Bug Fixes # Fix a compatibility issue with wheel==0.35 . #135 Release v0.8.6 (2020-07-09) # Bug Fixes # Fix a bug that extra sources are not respected when fetching distributions. #127 Release v0.8.5 (2020-06-24) # Bug Fixes # Fix a bug that pdm export fails when the project doesn't have name property. #126 Dependencies # Upgrade dependency pip to 20.1 . #125 Release v0.8.4 (2020-05-21) # Features & Improvements # Add a new command export to export to alternative formats. #117 Miscellany # Add Dockerfile and pushed to Docker Hub. #122 Release v0.8.3 (2020-05-15) # Bug Fixes # Fix the version constraint parsing of wheel metadata. #120 Release v0.8.2 (2020-05-03) # Bug Fixes # Update resolvers to resolvelib 0.4.0. #118 Release v0.8.1 (2020-04-22) # Dependencies # Switch to upstream resolvelib 0.3.0 . #116 Release v0.8.0 (2020-04-20) # Features & Improvements # Add a new command to search for packages #111 Add show command to show package metadata. #114 Bug Fixes # Fix a bug that environment markers cannot be evaluated correctly if extras are connected with \"or\". #107 Don't consult PyPI JSON API by default for package metadata. #112 Eliminate backslashes in markers for TOML documents. #115 Release v0.7.1 (2020-04-13) # Bug Fixes # Editable packages requires setuptools to be installed in the isolated environment. Release v0.7.0 (2020-04-12) # Features & Improvements # Disable loading of site-packages under PEP 582 mode. #100 Bug Fixes # Fix a bug that TOML parsing error is not correctly captured. #101 Fix a bug of building wheels with C extensions that the platform in file name is incorrect. #99 Release v0.6.5 (2020-04-07) # Bug Fixes # Unix style executable script suffix is missing. Release v0.6.4 (2020-04-07) # Features & Improvements # Update shebang lines in the executable scripts when doing pdm use . #96 Auto-detect commonly used venv directories. #97 Release v0.6.3 (2020-03-30) # Bug Fixes # Fix a bug of moving files across different file system. #95 Release v0.6.2 (2020-03-29) # Bug Fixes # Validate user input for python_requires when initializing project. #89 Ensure wheel package is available before building packages. #90 Fix an issue of remove command that will unexpectedly uninstall packages in default section. #92 Dependencies # Update dependencies pythonfinder , python-cfonts , pip-shims and many others. Drop dependency vistir . #89 Release v0.6.1 (2020-03-25) # Features & Improvements # Redirect output messages to log file for installation and locking. #84 Bug Fixes # Fix a bug that parallel installation fails due to setuptools reinstalling. #83 Release v0.6.0 (2020-03-20) # Features & Improvements # Support specifying build script for C extensions. #23 Add test cases for pdm build . #81 Make it configurable whether to consult PyPI JSON API since it may be not trustable. Support parallel installation. Add new command pmd import to import project metadata from Pipfile , poetry , flit , requirements.txt . #79 pdm init and pdm install will auto-detect possible files that can be imported. Bug Fixes # Fix wheel builds when package_dir is mapped. #81 pdm init will use the current directory rather than finding the parents when global project is not activated. Release v0.5.0 (2020-03-14) # Features & Improvements # Introduce a super easy-to-extend plug-in system to PDM. #75 Improved Documentation # Documentation on how to write a plugin. #75 Bug Fixes # Fix a typo in metadata parsing from plugins to entry_points Release v0.4.2 (2020-03-13) # Features & Improvements # Refactor the CLI part, switch from click to argparse , for better extensibility. #73 Allow users to configure to install packages into venv when it is activated. #74 Release v0.4.1 (2020-03-11) # Features & Improvements # Add a minimal dependency set for global project. #72 Release v0.4.0 (2020-03-10) # Features & Improvements # Global project support Add a new option -g/--global to manage global project. The default location is at ~/.pdm/global-project . Use the virtualenv interpreter when detected inside an activated venv. Add a new option -p/--project to select project root other than the default one. #30 Add a new command pdm config del to delete an existing config item. #71 Bug Fixes # Fix a URL parsing issue that username will be dropped in the SSH URL. #68 Improved Documentation # Add docs for global project and selecting project path. #30 Release v0.3.2 (2020-03-08) # Features & Improvements # Display all available Python interpreters if users don't give one in pdm init . #67 Bug Fixes # Regard 4.0 as infinite upper bound when checking subsetting. #66 Release v0.3.1 (2020-03-07) # Bug Fixes # Fix a bug that ImpossiblePySpec 's hash clashes with normal one. Release v0.3.0 (2020-02-28) # Features & Improvements # Add a new command pdm config to inspect configurations. #26 Add a new command pdm cache clear to clean caches. #63 Bug Fixes # Correctly show dependency graph when circular dependencies exist. #62 Improved Documentation # Write the initial documentation for PDM. #14 Release v0.2.6 (2020-02-25) # Features & Improvements # Improve the user interface of selecting Python interpreter. #54 Bug Fixes # Fix the wheel installer to correctly unparse the flags of console scripts. #56 Fix a bug that OS-dependent hashes are not saved. #57 Release v0.2.5 (2020-02-22) # Features & Improvements # Allow specifying Python interpreter via --python option in pdm init . #49 Set python_requires when initializing and defaults to >={current_version} . #50 Bug Fixes # Always consider wheels before tarballs; correctly merge markers from different parents. #47 Filter out incompatible wheels when installing. #48 Release v0.2.4 (2020-02-21) # Bug Fixes # Use the project local interpreter to build wheels. #43 Correctly merge Python specifiers when possible. #4 Release v0.2.3 (2020-02-21) # Bug Fixes # Fix a bug that editable build generates a malformed setup.py . Release v0.2.2 (2020-02-20) # Features & Improvements # Add a fancy greeting banner when user types pdm --help . #42 Bug Fixes # Fix the RECORD file in built wheel. #41 Dependencies # Add dependency python-cfonts to display banner. #42 Release v0.2.1 (2020-02-18) # Bug Fixes # Fix a bug that short python_version markers can't be parsed correctly. #38 Make _editable_intall.py compatible with Py2. Release v0.2.0 (2020-02-14) # Features & Improvements # New option: pdm list --graph to show a dependency graph of the working set. #10 New option: pdm update --unconstrained to ignore the version constraint of given packages. #13 Improve the error message when project is not initialized before running commands. #19 Pinned candidates in lock file are reused when relocking during pdm install . #33 Use the pyenv interpreter value if pyenv is installed. #36 Introduce a new command pdm info to show project environment information. #9 Bug Fixes # Fix a bug that candidate hashes will be lost when reused. #11 Dependencies # Update pip to 20.0 , update pip_shims to 0.5.0 . #28 Miscellany # Add a script named setup_dev.py for the convenience to setup pdm for development. #29 Release v0.1.2 (2020-02-09) # Features # New command pdm use to switch python versions. #8 New option pdm list --graph to show a dependency graph. #10 Read metadata from lockfile when pinned candidate is reused. Release v0.1.1 (2020-02-07) # Features # Get version from the specified file. #6 Add column header to pdm list output. Release v0.1.0 (2020-02-07) # Bugfixes # Pass exit code to parent process in pdm run. Fix error handling for CLI. #19 Miscellany # Refactor the installer mocking for tests. Release v0.0.5 (2020-01-22) # Improvements # Ensure pypi index url is fetched in addition to the source settings. #3 Bugfixes # Fix an issue that leading \"c\"s are mistakenly stripped. #5 Fix an error with PEP 517 building. Release v0.0.4 (2020-01-22) # Improvements # Fix editable installation, now editable scripts can also be executed from outside! Content hash is calculated based on dependencies and sources, not other metadata. Bugfixes # Fix an issue that editable distributions can not be removed. Release v0.0.3 (2020-01-22) # Features # Add pdm init to bootstrap a project. Release v0.0.2 (2020-01-22) # Features # A complete functioning PEP 517 build backend. pdm builld command. Miscellany # Add a Chinese README Features # Add pdm init to bootstrap a project. Release v0.0.1 (2020-01-20) # Features # A dependency resolver that just works. A PEP 582 installer. PEP 440 version specifiers. PEP 508 environment markers. Running scripts with PEP 582 local packages. Console scripts are injected with local paths. A neat CLI. add, lock, list, update, remove commands. PEP 517 build backends. Continuous Integration.","title":"Change Log"},{"location":"dev/changelog/#change-log","text":"","title":"Change Log"},{"location":"dev/changelog/#release-v1153-2022-06-14","text":"","title":"Release v1.15.3 (2022-06-14)"},{"location":"dev/changelog/#bug-fixes","text":"Fix a defect in the resolution preferences that causes an infinite resolution loop. #1119 Update the poetry importer to support the new [tool.poetry.build] config table. #1131","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation","text":"Add support for multiple versions of documentations. #1126","title":"Improved Documentation"},{"location":"dev/changelog/#release-v1152-2022-06-06","text":"","title":"Release v1.15.2 (2022-06-06)"},{"location":"dev/changelog/#bug-fixes_1","text":"Fix bug where SIGINT is sent to the main pdm process and not to the process actually being run. #1095 Fix a bug due to the build backend fallback, which causes different versions of the same requirement to exist in the build environment, making the building unstable depending on which version being used. #1099 Don't include the version in the cache key of the locked candidates if they are from a URL requirement. #1099 Fix a bug where dependencies with requires-python pre-release versions caused pdm update to fail with InvalidPyVersion . #1111","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1151-2022-06-02","text":"","title":"Release v1.15.1 (2022-06-02)"},{"location":"dev/changelog/#bug-fixes_2","text":"Fix a bug that dependencies are missing from the dep graph when they are depended by a requirement with extras. #1097 Give a default version if the version is dynamic in setup.cfg or setup.py . #1101 Fix a bug that the hashes for file URLs are not included in the lock file. #1103 Fix a bug that package versions are updated even when they are excluded by pdm update command. #1104 Prefer venv install scheme when available. This scheme is more stable than posix_prefix scheme since the latter is often patched by distributions. #1106","title":"Bug Fixes"},{"location":"dev/changelog/#miscellany","text":"Move the test artifacts to a submodule. It will make it easier to package this project. #1084","title":"Miscellany"},{"location":"dev/changelog/#release-v1150-2022-05-16","text":"","title":"Release v1.15.0 (2022-05-16)"},{"location":"dev/changelog/#features-improvements","text":"Allow specifying lockfile other than pdm.lock by --lockfile option or PDM_LOCKFILE env var. #1038","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_3","text":"Replace the editable entry in pyproject.toml when running pdm add --no-editable <package> . #1050 Ensure the pip module inside venv in installation script. #1053 Fix the py2 compatibility issue in the in-process get_sysconfig_path.py script. #1056 Fix a bug that file paths in URLs are not correctly unquoted. #1073 Fix a bug on Python 3.11 that overriding an existing command from plugins raises an error. #1075 Replace the ${PROJECT_ROOT} variable in the result of export command. #1079","title":"Bug Fixes"},{"location":"dev/changelog/#removals-and-deprecations","text":"Show a warning if Python 2 interpreter is being used and remove the support on 2.0. #1082","title":"Removals and Deprecations"},{"location":"dev/changelog/#release-v1141-2022-04-21","text":"","title":"Release v1.14.1 (2022-04-21)"},{"location":"dev/changelog/#features-improvements_1","text":"Ask for description when doing pdm init and create default README for libraries. #1041","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_4","text":"Fix a bug of missing subdirectory fragment when importing from a requirements.txt . #1036 Fix use_cache.json with corrupted python causes pdm use error. #1039 Ignore the optional key when converting from Poetry's dependency entries. #1042","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_1","text":"Clarify documentation on enabling PEP582 globally. #1033","title":"Improved Documentation"},{"location":"dev/changelog/#release-v1140-2022-04-08","text":"","title":"Release v1.14.0 (2022-04-08)"},{"location":"dev/changelog/#features-improvements_2","text":"Editable installations won't be overridden unless --no-editable is passed. pdm add --no-editable will now override the editable mode of the given packages. #1011 Re-calculate the file hashes when running pdm lock --refresh . #1019","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_5","text":"Fix a bug that requirement with extras isn't resolved to the version as specified by the range. #1001 Replace the ${PROJECT_ROOT} in the output of pdm list . #1004 Further fix the python path issue of MacOS system installed Python. #1023 Fix the install path issue on Python 3.10 installed from homebrew. #996","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_2","text":"Document how to install PDM inside a project with Pyprojectx. #1004","title":"Improved Documentation"},{"location":"dev/changelog/#dependencies","text":"Support installer 0.5.x . #1002","title":"Dependencies"},{"location":"dev/changelog/#release-v1136-2022-03-28","text":"","title":"Release v1.13.6 (2022-03-28)"},{"location":"dev/changelog/#bug-fixes_6","text":"Default the optional license field to \"None\". #991 Don't create project files in pdm search command. #993 Fix a bug that the env vars in source urls in exported result are not expanded. #997","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1135-2022-03-23","text":"","title":"Release v1.13.5 (2022-03-23)"},{"location":"dev/changelog/#features-improvements_3","text":"Users can change the install destination of global project to the user site( ~/.local ) with global_project.user_site config. #885 Make the path to the global project configurable. Rename the configuration auto_global to global_project.fallback and deprecate the old name. #986","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_7","text":"Fix the compatibility when fetching license information in show command. #966 Don't follow symlinks for the paths in the requirement strings. #976 Use the default install scheme when installing build requirements. #983 Fix a bug that _.site_packages is overridden by default option value. #985","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1134-2022-03-09","text":"","title":"Release v1.13.4 (2022-03-09)"},{"location":"dev/changelog/#features-improvements_4","text":"Update the dependency pdm-pep517 to support PEP 639. #959","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_8","text":"Filter out the unmatched python versions when listing the available versions. #941 Fix a bug displaying the available python versions. #943 Fix a bug under non-UTF8 console encoding. #960 Fix a bug that data files are not copied to the destination when using installation cache. #961","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1133-2022-02-24","text":"","title":"Release v1.13.3 (2022-02-24)"},{"location":"dev/changelog/#bug-fixes_9","text":"Fix a bug that VCS repo name are parsed as the package name. #928 Support prerelease versions for global projects. #932 Fix a bug that VCS revision in the lock file isn't respected when installing. #933","title":"Bug Fixes"},{"location":"dev/changelog/#dependencies_1","text":"Switch from pythonfinder to findpython as the Python version finder. #930","title":"Dependencies"},{"location":"dev/changelog/#release-v1132-2022-02-20","text":"","title":"Release v1.13.2 (2022-02-20)"},{"location":"dev/changelog/#bug-fixes_10","text":"Fix a regression issue that prereleases can't be installed if the version specifier of the requirement doesn't imply that. #920","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1131-2022-02-18","text":"","title":"Release v1.13.1 (2022-02-18)"},{"location":"dev/changelog/#bug-fixes_11","text":"Fix a bug that bad pip cache dir value breaks PDM's check update function. #922 Fix a race condition in parallel installation by changing metadata to a lazy property. This fixes a bug that incompatible wheels are installed unexpectedly. #924","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1130post0-2022-02-18","text":"","title":"Release v1.13.0.post0 (2022-02-18)"},{"location":"dev/changelog/#bug-fixes_12","text":"Fix a bug that incompatible platform-specific wheels are installed. #921","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1130-2022-02-18","text":"","title":"Release v1.13.0 (2022-02-18)"},{"location":"dev/changelog/#features-improvements_5","text":"Support pre_* and post_* scripts for task composition. Pre- and Post- scripts for init , build , install and lock will be run if present. #789 Support --config/-c option to specify another global configuration file. #883 Packages with extras require no longer inherit the dependencies from the same package without extras. It is because the package without extras are returned as one of the dependencies. This change won't break the existing lock files nor dependency cache. #892 Support version ranges in [tool.pdm.overrides] table. #909 Rename config use_venv to python.use_venv ; rename config feature.install_cache to install.cache ; rename config feature.install_cache_method to install.cache_method ; rename config parallel_install to install.parallel . #914","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_13","text":"Fix a bug that file URLs or VCS URLs don't work in [tool.pdm.overrides] table. #861 Fix a bug of identifier mismatch for URL requirements without an explicit name. #901 No requires-python should be produced if ANY( * ) is given. #917 Fix a bug that pdm.lock gets created when --dry-run is passed to pdm add . #918","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_3","text":"The default editable backend becomes path . #904","title":"Improved Documentation"},{"location":"dev/changelog/#removals-and-deprecations_1","text":"Stop auto-migrating projects from PDM 0.x format. #912","title":"Removals and Deprecations"},{"location":"dev/changelog/#refactor","text":"Rename ExtrasError to ExtrasWarning for better understanding. Improve the warning message. #892 Extract the environment related code from Candidate into a new class PreparedCandidate . Candidate no longer holds an Environment instance. #920","title":"Refactor"},{"location":"dev/changelog/#release-v1128-2022-02-06","text":"","title":"Release v1.12.8 (2022-02-06)"},{"location":"dev/changelog/#features-improvements_6","text":"Print the error and continue if a plugin fails to load. #878","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_14","text":"PDM now ignores configuration of uninstalled plugins. #872 Fix the compatibility issue with pip>=22.0 . #875","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1127-2022-01-31","text":"","title":"Release v1.12.7 (2022-01-31)"},{"location":"dev/changelog/#features-improvements_7","text":"If no command is given to pdm run , it will run the Python REPL. #856","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_15","text":"Fix the hash calculation when generating direct_url.json for a local pre-built wheel. #861 PDM no longer migrates project meta silently. #867","title":"Bug Fixes"},{"location":"dev/changelog/#dependencies_2","text":"Pin pip<22.0 . #874","title":"Dependencies"},{"location":"dev/changelog/#miscellany_1","text":"Reduce the number of tests that require network, and mark the rest with network marker. #858","title":"Miscellany"},{"location":"dev/changelog/#release-v1126-2022-01-12","text":"","title":"Release v1.12.6 (2022-01-12)"},{"location":"dev/changelog/#bug-fixes_16","text":"Fix a bug that cache dir isn't created. #843","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1125-2022-01-11","text":"","title":"Release v1.12.5 (2022-01-11)"},{"location":"dev/changelog/#bug-fixes_17","text":"Fix a resolution error that dots in the package name are normalized to - unexpectedly. #853","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1124-2022-01-11","text":"","title":"Release v1.12.4 (2022-01-11)"},{"location":"dev/changelog/#features-improvements_8","text":"Remember the last selection in use command to save the human effort. And introduce an -i option to ignored that remembered value. #846","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_18","text":"Fix a bug of uninstall crash when the package has directories in RECORD . #847 Fix the ModuleNotFoundError during uninstall when the modules required are removed. #850","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1123-2022-01-07","text":"","title":"Release v1.12.3 (2022-01-07)"},{"location":"dev/changelog/#features-improvements_9","text":"Support setting Python path in global configuration. #842","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_19","text":"Lowercase the package names in the lock file make it more stable. #836 Show the packages to be updated in dry run mode of pdm update even if --no-sync is passed. #837 Improve the robustness of update check code. #841 Fix a bug that export result has environment markers that don't apply for all requirements. #843","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1122-2021-12-30","text":"","title":"Release v1.12.2 (2021-12-30)"},{"location":"dev/changelog/#features-improvements_10","text":"Allow changing the installation linking method by feature.install_cache_method config. #822","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_20","text":"Fix a bug that namespace packages can't be symlinked to the cache due to existing links. #820 Make PDM generated pth files processed as early as possible. #821 Fix a UnicodeDecodeError for subprocess logger under Windows/GBK. #823","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1121-2021-12-24","text":"","title":"Release v1.12.1 (2021-12-24)"},{"location":"dev/changelog/#bug-fixes_21","text":"Don't symlink pycaches to the target place. #817","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1120-2021-12-22","text":"","title":"Release v1.12.0 (2021-12-22)"},{"location":"dev/changelog/#features-improvements_11","text":"Add lock --refresh to update the hash stored with the lock file without updating the pinned versions. #642 Support resolution overriding in the [tool.pdm.overrides] table. #790 Add support for signals for basic operations, now including post_init , pre_lock , post_lock , pre_install and post_install . #798 Add install --check to check if the lock file is up to date. #810 Use symlinks to cache installed packages when it is supported by the file system. #814","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_22","text":"Fix a bug that candidates from urls are rejected by the allow_prereleases setting. Now non-named requirements are resolved earlier than pinned requirements. #799","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_4","text":"Add a new doc page: API reference . #802","title":"Improved Documentation"},{"location":"dev/changelog/#dependencies_3","text":"Switch back from atoml to tomlkit as the style-preserving TOML parser. The latter has supported TOML v1.0.0. #809","title":"Dependencies"},{"location":"dev/changelog/#miscellany_2","text":"Cache the latest version of PDM for one week to reduce the request frequency. #800","title":"Miscellany"},{"location":"dev/changelog/#release-v1113-2021-12-15","text":"","title":"Release v1.11.3 (2021-12-15)"},{"location":"dev/changelog/#features-improvements_12","text":"Change the default version save strategy to minimum , without upper bounds. #787","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_23","text":"Fix the patching of sysconfig in PEP 582 initialization script. #796","title":"Bug Fixes"},{"location":"dev/changelog/#miscellany_3","text":"Fix an installation failure of the bootstrap script on MacOS Catalina. #793 Add a basic benchmarking script. #794","title":"Miscellany"},{"location":"dev/changelog/#release-v1112-2021-12-10","text":"","title":"Release v1.11.2 (2021-12-10)"},{"location":"dev/changelog/#bug-fixes_24","text":"Fix the resolution order to reduce the loop number to find a conflict. #781 Patch the functions in sysconfig to return the PEP 582 scheme in pdm run . #784","title":"Bug Fixes"},{"location":"dev/changelog/#dependencies_4","text":"Remove the upper bound of version constraints for most dependencies, except for some zero-versioned ones. #787","title":"Dependencies"},{"location":"dev/changelog/#release-v1111-2021-12-08","text":"","title":"Release v1.11.1 (2021-12-08)"},{"location":"dev/changelog/#features-improvements_13","text":"Support --pre/--prelease option for pdm add and pdm update . It will allow prereleases to be pinned. #774 Improve the error message when python is found but not meeting the python requirement. #777","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_25","text":"Fix a bug that git+https candidates cannot be resolved. #771 Fix an infinite resolution loop by resolving the top-level packages first. Also deduplicate the lines from the same requirement in the error output. #776","title":"Bug Fixes"},{"location":"dev/changelog/#miscellany_4","text":"Fix the install script to use a zipapp of virtualenv when it isn't installed. #780","title":"Miscellany"},{"location":"dev/changelog/#release-v1110-2021-11-30","text":"","title":"Release v1.11.0 (2021-11-30)"},{"location":"dev/changelog/#features-improvements_14","text":"Move version from [project] table to [tool.pdm] table, delete classifiers from dynamic , and warn usage about the deprecated usages. #748 Add support for Conda environments in addition to Python virtual environments. #749 Add support for saving only the lower bound x >= VERSION when adding dependencies. #752 Improve the error message when resolution fails. #754","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_26","text":"Switch to self-implemented pdm list --freeze to fix a bug due to Pip's API change. #533 Fix an infinite loop issue when resolving candidates with incompatible requires-python . #744 Fix the python finder to support pyenv-win. #745 Fix the ANSI color output for Windows cmd and Powershell terminals. #753","title":"Bug Fixes"},{"location":"dev/changelog/#removals-and-deprecations_2","text":"Remove -s/--section option from all previously supported commands. Use -G/--group instead. #756","title":"Removals and Deprecations"},{"location":"dev/changelog/#release-v1103-2021-11-18","text":"","title":"Release v1.10.3 (2021-11-18)"},{"location":"dev/changelog/#bug-fixes_27","text":"Use importlib to replace imp in the sitecustomize module for Python 3. #574 Fix the lib paths under non-isolated build. #740 Exclude the dependencies with extras in the result of pdm export . #741","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1102-2021-11-14","text":"","title":"Release v1.10.2 (2021-11-14)"},{"location":"dev/changelog/#features-improvements_15","text":"Add a new option -s/--site-packages to pdm run as well as a script config item. When it is set to True , site-packages from the selected interpreter will be loaded into the running environment. #733","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_28","text":"Now NO_SITE_PACKAGES isn't set in pdm run if the executable is out of local packages. #733","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1101-2021-11-09","text":"","title":"Release v1.10.1 (2021-11-09)"},{"location":"dev/changelog/#features-improvements_16","text":"Isolate the project environment with system site packages in pdm run , but keep them seen when PEP 582 is enabled. #708","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_29","text":"Run pip with --isolated when building wheels. In this way some env vars like PIP_REQUIRE_VIRTUALENV can be ignored. #669 Fix the install script to ensure pip is not DEBUNDLED. #685 Fix a bug that when summary is None , the lockfile can't be generated. #719 ${PROJECT_ROOT} should be written in the URL when relative path is given. #721 Fix a bug that when project table already exists, pdm import can't merge the settings correctly. #723","title":"Bug Fixes"},{"location":"dev/changelog/#release-v1100-2021-10-25","text":"","title":"Release v1.10.0 (2021-10-25)"},{"location":"dev/changelog/#features-improvements_17","text":"Add --no-sync option to update command. #684 Support find_links source type. It can be specified via type key of [[tool.pdm.source]] table. #694 Add --dry-run option to add , install and remove commands. #698","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_30","text":"Remove trailing whitespace with terminal output of tables (via project.core.ui.display_columns ), fixing unnecessary wrapping due to / with empty lines full of spaces in case of long URLs in the last column. #680 Include files should be installed under venv's base path. #682 Ensure the value of check_update is boolean. #689","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_5","text":"Update the contributing guide, remove the usage of setup_dev.py in favor of pip install . #676","title":"Improved Documentation"},{"location":"dev/changelog/#release-v190-2021-10-12","text":"","title":"Release v1.9.0 (2021-10-12)"},{"location":"dev/changelog/#bug-fixes_31","text":"Fix a bug that requires-python is not recognized in candidates evaluation. #657 Fix the path order when pdm run so that executables in local packages dir are found first. #678","title":"Bug Fixes"},{"location":"dev/changelog/#dependencies_5","text":"Update installer to 0.3.0 , fixing a bug that broke installation of some packages with unusual wheel files. #653 Change packaging and typing-extensions to direct dependencies. #674","title":"Dependencies"},{"location":"dev/changelog/#refactor_1","text":"requires-python now participates in the resolution as a dummy requirement. #658","title":"Refactor"},{"location":"dev/changelog/#release-v185-2021-09-16","text":"","title":"Release v1.8.5 (2021-09-16)"},{"location":"dev/changelog/#bug-fixes_32","text":"Fix the error of regex to find the shebang line. #656","title":"Bug Fixes"},{"location":"dev/changelog/#release-v184-2021-09-15","text":"","title":"Release v1.8.4 (2021-09-15)"},{"location":"dev/changelog/#features-improvements_18","text":"Support --no-isolation option for install , lock , update , remove , sync commands. #640 Make project_max_depth configurable and default to 5 . #643","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_33","text":"Don't try pdm-pep517 backend on Python 2.7 when installing self as editable. #640 Fix a bug that existing shebang can't be replaced correctly. #651 Fix the version range saving for prerelease versions. #654","title":"Bug Fixes"},{"location":"dev/changelog/#release-v183-2021-09-07","text":"","title":"Release v1.8.3 (2021-09-07)"},{"location":"dev/changelog/#features-improvements_19","text":"Allow to build in non-isolated environment, to enable optional speedups depending on the environment. #635","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_34","text":"Don't copy *-nspkg.pth files in install_cache mode. It will still work without them. #623","title":"Bug Fixes"},{"location":"dev/changelog/#release-v182-2021-09-01","text":"","title":"Release v1.8.2 (2021-09-01)"},{"location":"dev/changelog/#bug-fixes_35","text":"Fix the removal issue of standalone pyc files #633","title":"Bug Fixes"},{"location":"dev/changelog/#release-v181-2021-08-26","text":"","title":"Release v1.8.1 (2021-08-26)"},{"location":"dev/changelog/#features-improvements_20","text":"Add -r/--reinstall option to sync command to force re-install the existing dependencies. #601 Show update hint after every pdm command. #603 pdm cache clear can clear cached installations if not needed any more. #604","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_36","text":"Fix the editable install script so that setuptools won't see the dependencies under local packages. #601 Preserve the executable bit when installing wheels. #606 Write PEP 610 metadata direct_url.json when installing wheels. #607 Fix a bug that * fails to be converted as SpecifierSet . #609","title":"Bug Fixes"},{"location":"dev/changelog/#refactor_2","text":"Build editable packages are into wheels via PEP 660 build backend. Now all installations are unified into wheels. #612","title":"Refactor"},{"location":"dev/changelog/#release-v180-2021-08-16","text":"","title":"Release v1.8.0 (2021-08-16)"},{"location":"dev/changelog/#features-improvements_21","text":"Added a new mode --json to the list command which outputs the dependency graph as a JSON document. #583 Add a new config feature.install_cache . When it is turned on, wheels will be installed into a centralized package repo and create .pth files under project packages directory to link to the cached package. #589","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_37","text":"Fix env vars in source URLs not being expanded in all cases. #570 Fix the weird output of pdm show . #580 Prefer ~/.pyenv/shims/python3 as the pyenv interpreter. #590 Fix a bug that installing will download candidates that do not match the locked hashes. #596","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_6","text":"Added instructions to the Contributing section for creating news fragments #573","title":"Improved Documentation"},{"location":"dev/changelog/#removals-and-deprecations_3","text":"Deprecate -s/--section option in favor of -G/--group . #591","title":"Removals and Deprecations"},{"location":"dev/changelog/#refactor_3","text":"Switch to a self-implemented version of uninstaller. #586 pdm/installers/installers.py is renamed to pdm/installers/manager.py to be more accurate. The Installer class under that file is renamed to InstallerManager and is exposed in the pdm.core.Core object for overriding. The new pdm/installers/installers.py contains some installation implementations. #589 Switch from pkg_resources.Distribution to the implementation of importlib.metadata . #592","title":"Refactor"},{"location":"dev/changelog/#release-v172-2021-07-30","text":"","title":"Release v1.7.2 (2021-07-30)"},{"location":"dev/changelog/#bug-fixes_38","text":"Remove the existing files before installing. #565 Deduplicate the plugins list. #566","title":"Bug Fixes"},{"location":"dev/changelog/#release-v171-2021-07-29","text":"","title":"Release v1.7.1 (2021-07-29)"},{"location":"dev/changelog/#bug-fixes_39","text":"Accept non-canonical distribution name in the wheel's dist-info directory name. #529 Prefer requirements with narrower version constraints or allowing prereleases to find matches. #551 Use the underlying real executable path for writing shebangs. #553 Fix a bug that extra markers cannot be extracted when combined with other markers with \"and\". #559 Fix a bug that redacted credentials in source urls get overwritten with the plain text after locking. #561","title":"Bug Fixes"},{"location":"dev/changelog/#refactor_4","text":"Use installer as the wheel installer, replacing distlib . #519","title":"Refactor"},{"location":"dev/changelog/#release-v170-2021-07-20","text":"","title":"Release v1.7.0 (2021-07-20)"},{"location":"dev/changelog/#features-improvements_22","text":"Support showing individual fields by --<field-name> options in pdm show. When no package is given, show this project. #527 Add --freeze option to pdm list command which shows the dependencies list as pip's requirements.txt format. #531","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_40","text":"Fix the path manipulation on Windows, now the PEP 582 path is prepended to the PYTHONPATH . #522 Fix the handling of auth prompting: will try keyring in non-verbose mode. #523 Recognize old entry point name \"pdm.plugin\" for backward-compatibility. #530 Match the VCS scheme in case-insensitive manner. #537 Use the default permission bits when writing project files. #542 Fix the VCS url to be consistent between lock and install. #547","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_7","text":"Add installation instructions for Scoop. #522","title":"Improved Documentation"},{"location":"dev/changelog/#dependencies_6","text":"Update pdm-pep517 to 0.8.0 . #524 Switch from toml to tomli . #541","title":"Dependencies"},{"location":"dev/changelog/#refactor_5","text":"Separate the build env into two different levels for better caching. #541 Refactor the build part into smaller functions. #543","title":"Refactor"},{"location":"dev/changelog/#release-v164-2021-06-23","text":"","title":"Release v1.6.4 (2021-06-23)"},{"location":"dev/changelog/#features-improvements_23","text":"Extract package name from egg-info in filename when eligible. Remove the patching code of resolvelib's inner class. #441 Support installing packages from subdiretories of VCS repository. #507 Add an install script to bootstrap PDM quickly without help of other tools. Modify docs to recommend this installation method. #508 Add a new subcommand plugin to manage pdm plugins, including add , remove and list commands. #510","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_41","text":"Don't monkeypatch the internal class of resolvelib any more. This makes PDM more stable across updates of sub-dependencies. #515","title":"Bug Fixes"},{"location":"dev/changelog/#miscellany_5","text":"Clear the type errors from mypy. #261","title":"Miscellany"},{"location":"dev/changelog/#release-v163-2021-06-17","text":"","title":"Release v1.6.3 (2021-06-17)"},{"location":"dev/changelog/#features-improvements_24","text":"Add an option -u/--unconstrained to support unconstraining version specifiers when adding packages. #501","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_42","text":"Fix the format of dependency arrays when a new value is appended. #487 Allow missing email attribute for authors and maintainers. #492 Fix a bug that editable install shouldn't require pyproject.toml to be valid. #497 Fix a bug on MacOS that purelib and platlib paths of isolated build envs cannot be substituted correctly if the Python is a framework build. #502 Fix the version sort of candidates. #506","title":"Bug Fixes"},{"location":"dev/changelog/#release-v162-2021-05-31","text":"No significant changes.","title":"Release v1.6.2 (2021-05-31)"},{"location":"dev/changelog/#release-v161-2021-05-31","text":"No significant changes.","title":"Release v1.6.1 (2021-05-31)"},{"location":"dev/changelog/#release-v160-2021-05-31","text":"","title":"Release v1.6.0 (2021-05-31)"},{"location":"dev/changelog/#features-improvements_25","text":"Use a new approach to determine the packages to be installed. This requires a quick resolution step before installation. #456 pdm export no longer produces requirements file applicable for all platforms due to the new approach. #456 Add structural typing for requirements module. Refactor the requirements module for that purpose. #433 Introduce --no-editable option to install non-editable versions of all packages. #443 Introduce --no-self option to prevent the project itself from being installed. #444 Add a default .gitignore file in the __pypackages__ directory. #446 Check if the lock file version is compatible with PDM program before installation. #463 Expose the project root path via PDM_PROJECT_ROOT env var. Change to the project root when executing scripts. #470 Fix a bug that installation resolution doesn't respect the requirement markers from pyproject config. #480","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_43","text":"Changing to multiline breaks the parsing of TOML document. #462 Fix a bug that transient dependencies of conditional requirements can't be resolved. #472 Fix a bug that invalid wheels are rejected while they are acceptable for resolution. #473 Fix a bug that build environment is not fully isolated with the hosted environment. #477 Ensure the lock file is compatible before looking for the locked candidates. #484","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_8","text":"Fix 404 links in documentation. #472","title":"Improved Documentation"},{"location":"dev/changelog/#dependencies_7","text":"Migrate from tomlkit to atoml as the style-preserving TOML parser and writer. #465","title":"Dependencies"},{"location":"dev/changelog/#removals-and-deprecations_4","text":"Remove the warning of --dev flag for older versions of PDM. #444","title":"Removals and Deprecations"},{"location":"dev/changelog/#miscellany_6","text":"Add Python 3.10 beta CI job. #457","title":"Miscellany"},{"location":"dev/changelog/#release-v153-2021-05-10","text":"","title":"Release v1.5.3 (2021-05-10)"},{"location":"dev/changelog/#features-improvements_26","text":"Support passing options to the build backends via --config-setting . #452","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_44","text":"Seek for other sitecustomize.py to import. #422 Fix an unescaped single quote in fish completion script. #423 The hashes of a remote file candidate should be calculated from the link itself. #450","title":"Bug Fixes"},{"location":"dev/changelog/#dependencies_8","text":"Remove keyring as a dependency and guide users to install it when it is not available. #442 Specify the minimum version of distlib . #447","title":"Dependencies"},{"location":"dev/changelog/#miscellany_7","text":"Add log output about found candidates and their origin. #421 Add mypy pre-commit hook #427 Improve type safety of pdm.cli.actions #428 Fix wrong mypy configuration. #451","title":"Miscellany"},{"location":"dev/changelog/#release-v152-2021-04-27","text":"","title":"Release v1.5.2 (2021-04-27)"},{"location":"dev/changelog/#features-improvements_27","text":"Allow pdm use with no argument given, which will list all available pythons for pick. #409","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_45","text":"Inform user to enable PEP 582 for development script to work. #404 Check the existence of pyenv shim Python interpreter before using it. #406 Fix a bug that executing setup.py failed for NameError. #407 Check before setting the PYTHONPATH environment variable for PEP582 #410 Fix development setup error. #415","title":"Bug Fixes"},{"location":"dev/changelog/#dependencies_9","text":"Update pip to 21.1 and fix compatibility issues. #412","title":"Dependencies"},{"location":"dev/changelog/#release-v151-2021-04-22","text":"","title":"Release v1.5.1 (2021-04-22)"},{"location":"dev/changelog/#bug-fixes_46","text":"Make func translate_sections pure to avoid exporting requirements in random order. #401 Expand the variables in install requirements' attributes for build. #402","title":"Bug Fixes"},{"location":"dev/changelog/#release-v150-2021-04-20","text":"","title":"Release v1.5.0 (2021-04-20)"},{"location":"dev/changelog/#features-improvements_28","text":"Include dev dependencies by default for install and sync commands. Add a new option --prod/--production to exclude them. Improve the dependency selection logic to be more convenient to use \u2014 the more common the usage is, the shorter the command is. #391","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_47","text":"Enquote executable path to ensure generating valid scripts. #387 Consider hashes when fetching artifact link for build. #389 Considier the sources settings when building. #399","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_9","text":"New pdm setting source-includes to mark files to be included only in sdist builds. #390","title":"Improved Documentation"},{"location":"dev/changelog/#dependencies_10","text":"Update pdm-pep517 to 0.7.0 ; update resolvelib to 0.7.0 . #390","title":"Dependencies"},{"location":"dev/changelog/#removals-and-deprecations_5","text":"Deprecate the usage of -d/--dev option in install and sync commands. #391","title":"Removals and Deprecations"},{"location":"dev/changelog/#release-v150b1-2021-04-12","text":"","title":"Release v1.5.0b1 (2021-04-12)"},{"location":"dev/changelog/#features-improvements_29","text":"Improve the env builder to run in isolated mode. #384","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_48","text":"Remove the incompatible code from the files that will be run in-process. #375 Get the correct Python ABI tag of selected interpreter #378 Error out when doing pdm run on a directory not initialized yet. Give warning message when the project automatically fallbacks to the global project.","title":"Bug Fixes"},{"location":"dev/changelog/#dependencies_11","text":"Upgrade resolvelib to 0.6.0 . #381","title":"Dependencies"},{"location":"dev/changelog/#miscellany_8","text":"refactor pdm.models.readers to improve typing support #321 Add a basic integration test for cross-python check. #377 Refactor the project.python_executable to project.python that contains all info of the interpreter. #382 Continue refactoring Python info to extract to its own module. #383 Refactor the creation of project.","title":"Miscellany"},{"location":"dev/changelog/#release-v150b0-2021-04-03","text":"","title":"Release v1.5.0b0 (2021-04-03)"},{"location":"dev/changelog/#features-improvements_30","text":"Add hand-written zsh completion script. #188 Add a special value :all given to -s/--section to refer to all sections under the same species. Adjust add , sync , install , remove and update to support the new dev-dependencies groups. Old behavior will be kept the same. #351 dev-dependencies is now a table of dependencies groups, where key is the group name and value is an array of dependencies. These dependencies won't appear in the distribution's metadata. dev-depedencies of the old format will turn into dev group under dev-dependencies . #351 Move dev-dependencies , includes , excludes and package-dir out from [project] table to [tool.pdm] table. The migration will be done automatically if old format is detected. #351 Throws an error with meaningful message when no candidate is found for one requirement. #357 Support --dry-run option for update command to display packages that need update, install or removal. Add --top option to limit to top level packages only. #358 Full-featured completion scripts for Zsh and Powershell - section selection, package name autocompletion and so on. Windows is a first-class citizen! #367 Support non-interactive init command via -n/--non-interactive option. No question will be asked in this mode. #368 Show project packages path(PEP 582) in the output of pdm info , also add an option --packages to show that value only. #372","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_49","text":"Fix a bug that pure python libraries are not loaded to construct the WorkingSet. #346 Don't write <script>-X.Y variant to the bin folder. #365 Python is now run in isolated mode via subprocess to avoid accidentally importing user packages. #369 Don't overwrite existing dependencies when importing from requirements.txt. #370","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_10","text":"Add instructions of how to integrate PDM with Emacs, contributed by @linw1995. #372","title":"Improved Documentation"},{"location":"dev/changelog/#removals-and-deprecations_6","text":"Remove the support of project path following -g/--global that was deprecated in 1.4.0 . One should use -g -p <project_path> for that purpose. #361","title":"Removals and Deprecations"},{"location":"dev/changelog/#miscellany_9","text":"Add test coverage to PDM. #109 Add type annotations into untyped functions to start using mypy. #354 Refactor the format converter code to be more explicit. #360","title":"Miscellany"},{"location":"dev/changelog/#release-v145-2021-03-30","text":"","title":"Release v1.4.5 (2021-03-30)"},{"location":"dev/changelog/#features-improvements_31","text":"Skip the first prompt of pdm init #352","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_50","text":"Fix a test failure when using homebrew installed python. #348 Get revision from the VCS URL if source code isn't downloaded to local. #349","title":"Bug Fixes"},{"location":"dev/changelog/#dependencies_12","text":"Update dependency pdm-pep517 to 0.6.1 . #353","title":"Dependencies"},{"location":"dev/changelog/#release-v144-2021-03-27","text":"","title":"Release v1.4.4 (2021-03-27)"},{"location":"dev/changelog/#features-improvements_32","text":"Emit warning if version or description can't be retrieved when importing from flit metadata. #342 Add type argument to pdm cache clear and improve its UI. #343 Always re-install the editable packages when syncing the working set. This can help tracking the latest change of entry-points . #344","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_51","text":"Make installer quit early if a wheel isn't able to build. #338","title":"Bug Fixes"},{"location":"dev/changelog/#miscellany_10","text":"ignore type checking in models.project_info.ProjectInfo , which indexes distlib.metadata._data #335","title":"Miscellany"},{"location":"dev/changelog/#release-v143-2021-03-24","text":"","title":"Release v1.4.3 (2021-03-24)"},{"location":"dev/changelog/#features-improvements_33","text":"Change the group name of entry points from pdm.plugins to pdm . Export some useful objects and models for shorter import path. #318 Field cmd in tools.pdm.scripts configuration items now allows specifying an argument array instead of a string. Refactor: Remove the reference of stream singleton, improve the UI related code. #320 Support dependencies managed by poetry and flit being installed as editable packages. #324 Refactor: Extract the logic of finding interpreters to method for the sake of subclass overriding. #326 Complete the cache command, add list , remove and info subcommands. #329 Refactor: Unify the code about selecting interpreter to reduce the duplication. #331 Retrieve the version and description of a flit project by parsing the AST of the main file. #333","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_52","text":"Fix a parsing error when non-ascii characters exist in pyproject.toml . #308 Fix a bug that non-editable VCS candidates can't satisfy their requirements once locked in the lock file. #314 Fix a bug of import-on-init that fails when requirements.txt is detected. #328","title":"Bug Fixes"},{"location":"dev/changelog/#miscellany_11","text":"refactor pdm.iostream to improve 'typing' support #301 fix some typos #323","title":"Miscellany"},{"location":"dev/changelog/#release-v142-2021-03-18","text":"","title":"Release v1.4.2 (2021-03-18)"},{"location":"dev/changelog/#features-improvements_34","text":"Refactor the code, extract the version related logic from specifiers.py to a separated module. #303","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_53","text":"Fix a bug that get_dependencies() returns error when the setup.py has no intall_requires key. #299 Pin the VCS revision for non-editable VCS candidates in the lock file. #305 Fix a bug that editable build hits the cached wheel unexpectedly. #307","title":"Bug Fixes"},{"location":"dev/changelog/#miscellany_12","text":"replace 'typing comments' with type annotations throughout #298","title":"Miscellany"},{"location":"dev/changelog/#release-v141-2021-03-12","text":"","title":"Release v1.4.1 (2021-03-12)"},{"location":"dev/changelog/#features-improvements_35","text":"Support importing dependencies from requirements.txt to dev-dependencies or sections. #291","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_54","text":"Fallback to static parsing when building was failed to find the dependencies of a candidate. #293 Fix a bug that pdm init fails when pyproject.toml exists but has no [project] section. #295","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_11","text":"Document about how to use PDM with Nox. #281","title":"Improved Documentation"},{"location":"dev/changelog/#release-v140-2021-03-05","text":"","title":"Release v1.4.0 (2021-03-05)"},{"location":"dev/changelog/#features-improvements_36","text":"When -I/--ignore-python passed or PDM_IGNORE_SAVED_PYTHON=1 , ignore the interpreter set in .pdm.toml and don't save to it afterwards. #283 A new option -p/--project is introduced to specify another path for the project base. It can also be combined with -g/--global option. The latter is changed to a flag only option that does not accept values. #286 Support -f setuppy for pdm export to export the metadata as setup.py #289","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_55","text":"Fix a bug that editable local package requirements cannot be parsed rightly. #285 Change the priority of metadata files to parse so that PEP 621 metadata will be parsed first. #288","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_12","text":"Add examples of how to integrate with CI pipelines (and tox). #281","title":"Improved Documentation"},{"location":"dev/changelog/#release-v134-2021-03-01","text":"","title":"Release v1.3.4 (2021-03-01)"},{"location":"dev/changelog/#improved-documentation_13","text":"added documentation on a task provider for vscode #280","title":"Improved Documentation"},{"location":"dev/changelog/#bug-fixes_56","text":"Ignore the python requires constraints when fetching the link from the PyPI index.","title":"Bug Fixes"},{"location":"dev/changelog/#release-v133-2021-02-26","text":"","title":"Release v1.3.3 (2021-02-26)"},{"location":"dev/changelog/#bug-fixes_57","text":"Fix the requirement string of a VCS requirement to comply with PEP 508. #275 Fix a bug that editable packages with src directory can't be uninstalled correctly. #277 Fix a bug that editable package doesn't override the non-editable version in the working set. #278","title":"Bug Fixes"},{"location":"dev/changelog/#release-v132-2021-02-25","text":"","title":"Release v1.3.2 (2021-02-25)"},{"location":"dev/changelog/#features-improvements_37","text":"Abort and tell user the selected section following pdm sync or pdm install is not present in the error message. #274","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_58","text":"Fix a bug that candidates' sections cannot be retrieved rightly when circular dependencies exist. #270 Don't pass the help argument into the run script method. #272","title":"Bug Fixes"},{"location":"dev/changelog/#release-v131-2021-02-19","text":"","title":"Release v1.3.1 (2021-02-19)"},{"location":"dev/changelog/#bug-fixes_59","text":"Use the absolute path when importing from a Poetry pyproject.toml. #262 Fix a bug that old toml table head is kept when converting to PEP 621 metadata format. #263 Postpone the evaluation of requires-python attribute when fetching the candidates of a package. #264","title":"Bug Fixes"},{"location":"dev/changelog/#release-v130-2021-02-09","text":"","title":"Release v1.3.0 (2021-02-09)"},{"location":"dev/changelog/#features-improvements_38","text":"Increase the default value of the max rounds of resolution to 1000, make it configurable. #238 Rewrite the project's egg-info directory when dependencies change. So that pdm list --graph won't show invalid entries. #240 When importing requirements from a requirements.txt file, build the package to find the name if not given in the URL. #245 When initializing the project, prompt user for whether the project is a library, and give empty name and version if not. #253","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_60","text":"Fix the version validator of wheel metadata to align with the implementation of packaging . #130 Preserve the sections value of a pinned candidate to be reused. #234 Strip spaces in user input when prompting for the python version to use. #252 Fix the version parsing of Python requires to allow > , >= , < , <= to combine with star versions. #254","title":"Bug Fixes"},{"location":"dev/changelog/#release-v120-2021-01-26","text":"","title":"Release v1.2.0 (2021-01-26)"},{"location":"dev/changelog/#features-improvements_39","text":"Change the behavior of --save-compatible slightly. Now the version specifier saved is using the REAL compatible operator ~= as described in PEP 440. Before: requests<3.0.0,>=2.19.1 , After: requests~=2.19 . The new specifier accepts requests==2.19.0 as compatible version. #225 Environment variable ${PROJECT_ROOT} in the dependency specification can be expanded to refer to the project root in pyproject.toml. The environment variables will be kept as they are in the lock file. #226 Change the dependencies of a package in the lock file to a list of PEP 508 strings #236","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_61","text":"Ignore user's site and PYTHONPATH (with python -I mode) when executing pip commands. #231","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_14","text":"Document about how to activate and use a plugin. #227","title":"Improved Documentation"},{"location":"dev/changelog/#dependencies_13","text":"Test project on pip 21.0 . #235","title":"Dependencies"},{"location":"dev/changelog/#release-v110-2021-01-18","text":"","title":"Release v1.1.0 (2021-01-18)"},{"location":"dev/changelog/#features-improvements_40","text":"Allow users to hide secrets from the pyproject.toml . Dynamically expand env variables in the URLs in dependencies and indexes. Ask whether to store the credentials provided by the user. A user-friendly error will show when credentials are not provided nor correct. #198 Use a different package dir for 32-bit installation(Windows). #212 Auto disable PEP 582 when a venv-like python is given as the interpreter path. #219 Support specifying Python interpreter by pdm use <path-to-python-root> . #221","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_62","text":"Fix a bug of PYTHONPATH manipulation under Windows platform. #215","title":"Bug Fixes"},{"location":"dev/changelog/#removals-and-deprecations_7","text":"Remove support of the old PEP 517 backend API path. #217","title":"Removals and Deprecations"},{"location":"dev/changelog/#release-v100-2021-01-05","text":"","title":"Release v1.0.0 (2021-01-05)"},{"location":"dev/changelog/#bug-fixes_63","text":"Correctly build wheels for dependencies with build-requirements but without a specified build-backend #213","title":"Bug Fixes"},{"location":"dev/changelog/#release-v100b2-2020-12-29","text":"","title":"Release v1.0.0b2 (2020-12-29)"},{"location":"dev/changelog/#features-improvements_41","text":"Fallback to pypi.org when /search endpoint is not available on given index. #211","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_64","text":"Fix a bug that PDM fails to parse python version specifiers with more than 3 parts. #210","title":"Bug Fixes"},{"location":"dev/changelog/#release-v100b0-2020-12-24","text":"","title":"Release v1.0.0b0 (2020-12-24)"},{"location":"dev/changelog/#features-improvements_42","text":"Fully support of PEP 621 specification. Old format is deprecated at the same time. PDM will migrate the project file for you when old format is detected. Other metadata formats( Poetry , Pipfile , flit ) can also be imported as PEP 621 metadata. #175 Re-implement the pdm search to query the /search HTTP endpoint. #195 Reuse the cached built wheels to accelerate the installation. #200 Make update strategy and save strategy configurable in pdm config. #202 Improve the error message to give more insight on what to do when resolution fails. #207 Set classifiers dynamic in pyproject.toml template for autogeneration. #209","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_65","text":"Fix a bug that distributions are not removed clearly in parallel mode. #204 Fix a bug that python specifier is_subset() returns incorrect result. #206","title":"Bug Fixes"},{"location":"dev/changelog/#release-v0123-2020-12-21","text":"","title":"Release v0.12.3 (2020-12-21)"},{"location":"dev/changelog/#dependencies_14","text":"Pin pdm-pep517 to <0.3.0 , this is the last version to support legacy project metadata format.","title":"Dependencies"},{"location":"dev/changelog/#release-v0122-2020-12-17","text":"","title":"Release v0.12.2 (2020-12-17)"},{"location":"dev/changelog/#features-improvements_43","text":"Update the lock file schema, move the file hashes to [metadata.files] table. #196 Retry failed jobs when syncing packages. #197","title":"Features &amp; Improvements"},{"location":"dev/changelog/#removals-and-deprecations_8","text":"Drop pip-shims package as a dependency. #132","title":"Removals and Deprecations"},{"location":"dev/changelog/#miscellany_13","text":"Fix the cache path for CI. #199","title":"Miscellany"},{"location":"dev/changelog/#release-v0121-2020-12-14","text":"","title":"Release v0.12.1 (2020-12-14)"},{"location":"dev/changelog/#features-improvements_44","text":"Provide an option to export requirements from pyproject.toml #190 For Windows users, pdm --pep582 can enable PEP 582 globally by manipulating the WinReg. #191","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_66","text":"Inject __pypackages__ into PATH env var during pdm run . #193","title":"Bug Fixes"},{"location":"dev/changelog/#release-v0120-2020-12-08","text":"","title":"Release v0.12.0 (2020-12-08)"},{"location":"dev/changelog/#features-improvements_45","text":"Improve the user experience of pdm run : Add a special key in tool.pdm.scripts that holds configurations shared by all scripts. Support loading env var from a dot-env file. Add a flag -s/--site-packages to include system site-packages when running. #178 Now PEP 582 can be enabled in the Python interpreter directly! #181","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_67","text":"Ensure setuptools is installed before invoking editable install script. #174 Require wheel not wheels for global projects #182 Write a sitecustomize.py instead of a .pth file to enable PEP 582. Thanks @Aloxaf. Update get_package_finder() to be compatible with pip 20.3 . #185 Fix the help messages of commands \"cache\" and \"remove\" #187","title":"Bug Fixes"},{"location":"dev/changelog/#release-v0110-2020-11-20","text":"","title":"Release v0.11.0 (2020-11-20)"},{"location":"dev/changelog/#features-improvements_46","text":"Support custom script shortcuts in pyproject.toml . Support custom script shortcuts defined in [tool.pdm.scripts] section. Add pdm run --list/-l to show the list of script shortcuts. #168 Patch the halo library to support parallel spinners. Change the looking of pdm install . #169","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_68","text":"Fix a bug that package's marker fails to propagate to its grandchildren if they have already been resolved. #170 Fix a bug that bare version specifiers in Poetry project can't be converted correctly. #172 Fix the build error that destination directory is not created automatically. #173","title":"Bug Fixes"},{"location":"dev/changelog/#release-v0102-2020-11-05","text":"","title":"Release v0.10.2 (2020-11-05)"},{"location":"dev/changelog/#bug-fixes_69","text":"Building editable distribution does not install build-system.requires anymore. #167","title":"Bug Fixes"},{"location":"dev/changelog/#release-v0101-2020-11-04","text":"","title":"Release v0.10.1 (2020-11-04)"},{"location":"dev/changelog/#bug-fixes_70","text":"Switch the PEP 517 build frontend from build to a home-grown version. #162 Synchronize the output of LogWrapper . #164 Fix a bug that is_subset and is_superset may return wrong result when wildcard excludes overlaps with the upper bound. #165","title":"Bug Fixes"},{"location":"dev/changelog/#release-v0100-2020-10-20","text":"","title":"Release v0.10.0 (2020-10-20)"},{"location":"dev/changelog/#features-improvements_47","text":"Change to Git style config command. #157 Add a command to generate scripts for autocompletion, which is backed by pycomplete . #159","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_71","text":"Fix a bug that sitecustomize.py incorrectly gets injected into the editable console scripts. #158","title":"Bug Fixes"},{"location":"dev/changelog/#release-v092-2020-10-13","text":"","title":"Release v0.9.2 (2020-10-13)"},{"location":"dev/changelog/#features-improvements_48","text":"Cache the built wheels to accelerate resolution and installation process. #153","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_72","text":"Fix a bug that no wheel is matched when finding candidates to install. #155 Fix a bug that installation in parallel will cause encoding initialization error on Ubuntu. #156","title":"Bug Fixes"},{"location":"dev/changelog/#release-v091-2020-10-13","text":"","title":"Release v0.9.1 (2020-10-13)"},{"location":"dev/changelog/#features-improvements_49","text":"Display plain text instead of spinner bar under verbose mode. #150","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_73","text":"Fix a bug that the result of find_matched() is exhausted when accessed twice. #149","title":"Bug Fixes"},{"location":"dev/changelog/#release-v090-2020-10-08","text":"","title":"Release v0.9.0 (2020-10-08)"},{"location":"dev/changelog/#features-improvements_50","text":"Allow users to combine several dependency sections to form an extra require. #131 Split the PEP 517 backend to its own(battery included) package. #134 Add a new option to list command to show reverse dependency graph. #137","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_74","text":"Fix a bug that spaces in path causes requirement parsing error. #138 Fix a bug that requirement's python constraint is not respected when resolving. #141","title":"Bug Fixes"},{"location":"dev/changelog/#dependencies_15","text":"Update pdm-pep517 to 0.2.0 that supports reading version from SCM. #146","title":"Dependencies"},{"location":"dev/changelog/#miscellany_14","text":"Add Python 3.9 to the CI version matrix to verify. #144","title":"Miscellany"},{"location":"dev/changelog/#release-v087-2020-09-04","text":"","title":"Release v0.8.7 (2020-09-04)"},{"location":"dev/changelog/#bug-fixes_75","text":"Fix a compatibility issue with wheel==0.35 . #135","title":"Bug Fixes"},{"location":"dev/changelog/#release-v086-2020-07-09","text":"","title":"Release v0.8.6 (2020-07-09)"},{"location":"dev/changelog/#bug-fixes_76","text":"Fix a bug that extra sources are not respected when fetching distributions. #127","title":"Bug Fixes"},{"location":"dev/changelog/#release-v085-2020-06-24","text":"","title":"Release v0.8.5 (2020-06-24)"},{"location":"dev/changelog/#bug-fixes_77","text":"Fix a bug that pdm export fails when the project doesn't have name property. #126","title":"Bug Fixes"},{"location":"dev/changelog/#dependencies_16","text":"Upgrade dependency pip to 20.1 . #125","title":"Dependencies"},{"location":"dev/changelog/#release-v084-2020-05-21","text":"","title":"Release v0.8.4 (2020-05-21)"},{"location":"dev/changelog/#features-improvements_51","text":"Add a new command export to export to alternative formats. #117","title":"Features &amp; Improvements"},{"location":"dev/changelog/#miscellany_15","text":"Add Dockerfile and pushed to Docker Hub. #122","title":"Miscellany"},{"location":"dev/changelog/#release-v083-2020-05-15","text":"","title":"Release v0.8.3 (2020-05-15)"},{"location":"dev/changelog/#bug-fixes_78","text":"Fix the version constraint parsing of wheel metadata. #120","title":"Bug Fixes"},{"location":"dev/changelog/#release-v082-2020-05-03","text":"","title":"Release v0.8.2 (2020-05-03)"},{"location":"dev/changelog/#bug-fixes_79","text":"Update resolvers to resolvelib 0.4.0. #118","title":"Bug Fixes"},{"location":"dev/changelog/#release-v081-2020-04-22","text":"","title":"Release v0.8.1 (2020-04-22)"},{"location":"dev/changelog/#dependencies_17","text":"Switch to upstream resolvelib 0.3.0 . #116","title":"Dependencies"},{"location":"dev/changelog/#release-v080-2020-04-20","text":"","title":"Release v0.8.0 (2020-04-20)"},{"location":"dev/changelog/#features-improvements_52","text":"Add a new command to search for packages #111 Add show command to show package metadata. #114","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_80","text":"Fix a bug that environment markers cannot be evaluated correctly if extras are connected with \"or\". #107 Don't consult PyPI JSON API by default for package metadata. #112 Eliminate backslashes in markers for TOML documents. #115","title":"Bug Fixes"},{"location":"dev/changelog/#release-v071-2020-04-13","text":"","title":"Release v0.7.1 (2020-04-13)"},{"location":"dev/changelog/#bug-fixes_81","text":"Editable packages requires setuptools to be installed in the isolated environment.","title":"Bug Fixes"},{"location":"dev/changelog/#release-v070-2020-04-12","text":"","title":"Release v0.7.0 (2020-04-12)"},{"location":"dev/changelog/#features-improvements_53","text":"Disable loading of site-packages under PEP 582 mode. #100","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_82","text":"Fix a bug that TOML parsing error is not correctly captured. #101 Fix a bug of building wheels with C extensions that the platform in file name is incorrect. #99","title":"Bug Fixes"},{"location":"dev/changelog/#release-v065-2020-04-07","text":"","title":"Release v0.6.5 (2020-04-07)"},{"location":"dev/changelog/#bug-fixes_83","text":"Unix style executable script suffix is missing.","title":"Bug Fixes"},{"location":"dev/changelog/#release-v064-2020-04-07","text":"","title":"Release v0.6.4 (2020-04-07)"},{"location":"dev/changelog/#features-improvements_54","text":"Update shebang lines in the executable scripts when doing pdm use . #96 Auto-detect commonly used venv directories. #97","title":"Features &amp; Improvements"},{"location":"dev/changelog/#release-v063-2020-03-30","text":"","title":"Release v0.6.3 (2020-03-30)"},{"location":"dev/changelog/#bug-fixes_84","text":"Fix a bug of moving files across different file system. #95","title":"Bug Fixes"},{"location":"dev/changelog/#release-v062-2020-03-29","text":"","title":"Release v0.6.2 (2020-03-29)"},{"location":"dev/changelog/#bug-fixes_85","text":"Validate user input for python_requires when initializing project. #89 Ensure wheel package is available before building packages. #90 Fix an issue of remove command that will unexpectedly uninstall packages in default section. #92","title":"Bug Fixes"},{"location":"dev/changelog/#dependencies_18","text":"Update dependencies pythonfinder , python-cfonts , pip-shims and many others. Drop dependency vistir . #89","title":"Dependencies"},{"location":"dev/changelog/#release-v061-2020-03-25","text":"","title":"Release v0.6.1 (2020-03-25)"},{"location":"dev/changelog/#features-improvements_55","text":"Redirect output messages to log file for installation and locking. #84","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_86","text":"Fix a bug that parallel installation fails due to setuptools reinstalling. #83","title":"Bug Fixes"},{"location":"dev/changelog/#release-v060-2020-03-20","text":"","title":"Release v0.6.0 (2020-03-20)"},{"location":"dev/changelog/#features-improvements_56","text":"Support specifying build script for C extensions. #23 Add test cases for pdm build . #81 Make it configurable whether to consult PyPI JSON API since it may be not trustable. Support parallel installation. Add new command pmd import to import project metadata from Pipfile , poetry , flit , requirements.txt . #79 pdm init and pdm install will auto-detect possible files that can be imported.","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_87","text":"Fix wheel builds when package_dir is mapped. #81 pdm init will use the current directory rather than finding the parents when global project is not activated.","title":"Bug Fixes"},{"location":"dev/changelog/#release-v050-2020-03-14","text":"","title":"Release v0.5.0 (2020-03-14)"},{"location":"dev/changelog/#features-improvements_57","text":"Introduce a super easy-to-extend plug-in system to PDM. #75","title":"Features &amp; Improvements"},{"location":"dev/changelog/#improved-documentation_15","text":"Documentation on how to write a plugin. #75","title":"Improved Documentation"},{"location":"dev/changelog/#bug-fixes_88","text":"Fix a typo in metadata parsing from plugins to entry_points","title":"Bug Fixes"},{"location":"dev/changelog/#release-v042-2020-03-13","text":"","title":"Release v0.4.2 (2020-03-13)"},{"location":"dev/changelog/#features-improvements_58","text":"Refactor the CLI part, switch from click to argparse , for better extensibility. #73 Allow users to configure to install packages into venv when it is activated. #74","title":"Features &amp; Improvements"},{"location":"dev/changelog/#release-v041-2020-03-11","text":"","title":"Release v0.4.1 (2020-03-11)"},{"location":"dev/changelog/#features-improvements_59","text":"Add a minimal dependency set for global project. #72","title":"Features &amp; Improvements"},{"location":"dev/changelog/#release-v040-2020-03-10","text":"","title":"Release v0.4.0 (2020-03-10)"},{"location":"dev/changelog/#features-improvements_60","text":"Global project support Add a new option -g/--global to manage global project. The default location is at ~/.pdm/global-project . Use the virtualenv interpreter when detected inside an activated venv. Add a new option -p/--project to select project root other than the default one. #30 Add a new command pdm config del to delete an existing config item. #71","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_89","text":"Fix a URL parsing issue that username will be dropped in the SSH URL. #68","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_16","text":"Add docs for global project and selecting project path. #30","title":"Improved Documentation"},{"location":"dev/changelog/#release-v032-2020-03-08","text":"","title":"Release v0.3.2 (2020-03-08)"},{"location":"dev/changelog/#features-improvements_61","text":"Display all available Python interpreters if users don't give one in pdm init . #67","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_90","text":"Regard 4.0 as infinite upper bound when checking subsetting. #66","title":"Bug Fixes"},{"location":"dev/changelog/#release-v031-2020-03-07","text":"","title":"Release v0.3.1 (2020-03-07)"},{"location":"dev/changelog/#bug-fixes_91","text":"Fix a bug that ImpossiblePySpec 's hash clashes with normal one.","title":"Bug Fixes"},{"location":"dev/changelog/#release-v030-2020-02-28","text":"","title":"Release v0.3.0 (2020-02-28)"},{"location":"dev/changelog/#features-improvements_62","text":"Add a new command pdm config to inspect configurations. #26 Add a new command pdm cache clear to clean caches. #63","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_92","text":"Correctly show dependency graph when circular dependencies exist. #62","title":"Bug Fixes"},{"location":"dev/changelog/#improved-documentation_17","text":"Write the initial documentation for PDM. #14","title":"Improved Documentation"},{"location":"dev/changelog/#release-v026-2020-02-25","text":"","title":"Release v0.2.6 (2020-02-25)"},{"location":"dev/changelog/#features-improvements_63","text":"Improve the user interface of selecting Python interpreter. #54","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_93","text":"Fix the wheel installer to correctly unparse the flags of console scripts. #56 Fix a bug that OS-dependent hashes are not saved. #57","title":"Bug Fixes"},{"location":"dev/changelog/#release-v025-2020-02-22","text":"","title":"Release v0.2.5 (2020-02-22)"},{"location":"dev/changelog/#features-improvements_64","text":"Allow specifying Python interpreter via --python option in pdm init . #49 Set python_requires when initializing and defaults to >={current_version} . #50","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_94","text":"Always consider wheels before tarballs; correctly merge markers from different parents. #47 Filter out incompatible wheels when installing. #48","title":"Bug Fixes"},{"location":"dev/changelog/#release-v024-2020-02-21","text":"","title":"Release v0.2.4 (2020-02-21)"},{"location":"dev/changelog/#bug-fixes_95","text":"Use the project local interpreter to build wheels. #43 Correctly merge Python specifiers when possible. #4","title":"Bug Fixes"},{"location":"dev/changelog/#release-v023-2020-02-21","text":"","title":"Release v0.2.3 (2020-02-21)"},{"location":"dev/changelog/#bug-fixes_96","text":"Fix a bug that editable build generates a malformed setup.py .","title":"Bug Fixes"},{"location":"dev/changelog/#release-v022-2020-02-20","text":"","title":"Release v0.2.2 (2020-02-20)"},{"location":"dev/changelog/#features-improvements_65","text":"Add a fancy greeting banner when user types pdm --help . #42","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_97","text":"Fix the RECORD file in built wheel. #41","title":"Bug Fixes"},{"location":"dev/changelog/#dependencies_19","text":"Add dependency python-cfonts to display banner. #42","title":"Dependencies"},{"location":"dev/changelog/#release-v021-2020-02-18","text":"","title":"Release v0.2.1 (2020-02-18)"},{"location":"dev/changelog/#bug-fixes_98","text":"Fix a bug that short python_version markers can't be parsed correctly. #38 Make _editable_intall.py compatible with Py2.","title":"Bug Fixes"},{"location":"dev/changelog/#release-v020-2020-02-14","text":"","title":"Release v0.2.0 (2020-02-14)"},{"location":"dev/changelog/#features-improvements_66","text":"New option: pdm list --graph to show a dependency graph of the working set. #10 New option: pdm update --unconstrained to ignore the version constraint of given packages. #13 Improve the error message when project is not initialized before running commands. #19 Pinned candidates in lock file are reused when relocking during pdm install . #33 Use the pyenv interpreter value if pyenv is installed. #36 Introduce a new command pdm info to show project environment information. #9","title":"Features &amp; Improvements"},{"location":"dev/changelog/#bug-fixes_99","text":"Fix a bug that candidate hashes will be lost when reused. #11","title":"Bug Fixes"},{"location":"dev/changelog/#dependencies_20","text":"Update pip to 20.0 , update pip_shims to 0.5.0 . #28","title":"Dependencies"},{"location":"dev/changelog/#miscellany_16","text":"Add a script named setup_dev.py for the convenience to setup pdm for development. #29","title":"Miscellany"},{"location":"dev/changelog/#release-v012-2020-02-09","text":"","title":"Release v0.1.2 (2020-02-09)"},{"location":"dev/changelog/#features","text":"New command pdm use to switch python versions. #8 New option pdm list --graph to show a dependency graph. #10 Read metadata from lockfile when pinned candidate is reused.","title":"Features"},{"location":"dev/changelog/#release-v011-2020-02-07","text":"","title":"Release v0.1.1 (2020-02-07)"},{"location":"dev/changelog/#features_1","text":"Get version from the specified file. #6 Add column header to pdm list output.","title":"Features"},{"location":"dev/changelog/#release-v010-2020-02-07","text":"","title":"Release v0.1.0 (2020-02-07)"},{"location":"dev/changelog/#bugfixes","text":"Pass exit code to parent process in pdm run. Fix error handling for CLI. #19","title":"Bugfixes"},{"location":"dev/changelog/#miscellany_17","text":"Refactor the installer mocking for tests.","title":"Miscellany"},{"location":"dev/changelog/#release-v005-2020-01-22","text":"","title":"Release v0.0.5 (2020-01-22)"},{"location":"dev/changelog/#improvements","text":"Ensure pypi index url is fetched in addition to the source settings. #3","title":"Improvements"},{"location":"dev/changelog/#bugfixes_1","text":"Fix an issue that leading \"c\"s are mistakenly stripped. #5 Fix an error with PEP 517 building.","title":"Bugfixes"},{"location":"dev/changelog/#release-v004-2020-01-22","text":"","title":"Release v0.0.4 (2020-01-22)"},{"location":"dev/changelog/#improvements_1","text":"Fix editable installation, now editable scripts can also be executed from outside! Content hash is calculated based on dependencies and sources, not other metadata.","title":"Improvements"},{"location":"dev/changelog/#bugfixes_2","text":"Fix an issue that editable distributions can not be removed.","title":"Bugfixes"},{"location":"dev/changelog/#release-v003-2020-01-22","text":"","title":"Release v0.0.3 (2020-01-22)"},{"location":"dev/changelog/#features_2","text":"Add pdm init to bootstrap a project.","title":"Features"},{"location":"dev/changelog/#release-v002-2020-01-22","text":"","title":"Release v0.0.2 (2020-01-22)"},{"location":"dev/changelog/#features_3","text":"A complete functioning PEP 517 build backend. pdm builld command.","title":"Features"},{"location":"dev/changelog/#miscellany_18","text":"Add a Chinese README","title":"Miscellany"},{"location":"dev/changelog/#features_4","text":"Add pdm init to bootstrap a project.","title":"Features"},{"location":"dev/changelog/#release-v001-2020-01-20","text":"","title":"Release v0.0.1 (2020-01-20)"},{"location":"dev/changelog/#features_5","text":"A dependency resolver that just works. A PEP 582 installer. PEP 440 version specifiers. PEP 508 environment markers. Running scripts with PEP 582 local packages. Console scripts are injected with local paths. A neat CLI. add, lock, list, update, remove commands. PEP 517 build backends. Continuous Integration.","title":"Features"},{"location":"dev/contributing/","text":"Contributing to PDM # First off, thanks for taking the time to contribute! Contributions include but are not restricted to: Reporting bugs Contributing to code Writing tests Writing documentation The following is a set of guidelines for contributing. A recommended flow of contributing to an Open Source project # This section is for beginners to OSS. If you are an experienced OSS developer, you can skip this section. First, fork this project to your own namespace using the fork button at the top right of the repository page. Clone the upstream repository to local: 1 2 3 git clone https://github.com/pdm-project/pdm.git # Or if you prefer SSH clone: git clone git@github.com:pdm-project/pdm.git Add the fork as a new remote: 1 2 git remote add fork https://github.com/yourname/pdm.git git fetch fork where fork is the remote name of the fork repository. ProTips: Don't modify code on the main branch, the main branch should always keep track of origin/main. To update main branch to date: 1 2 3 git pull origin main # In rare cases that your local main branch diverges from the remote main: git fetch origin && git reset --hard main Create a new branch based on the up-to-date main branch for new patches. Create a Pull Request from that patch branch. Local development # To make sure the test suites can run correctly, you need to install Git LFS , then 1 2 3 git lfs install # If you have already cloned the repository, execute the below command as well. git lfs pull Then, you need to install base dependencies in a venv. Make sure your pip is newer than 21.3 to install PDM in develop/editable mode. 1 2 python -m pip install -U \"pip>=21.3\" python -m pip install -e . You are free to create a virtualenv with either venv module or virtualenv tool for the development. If you are doing so, you may also need to set pdm config use_venv true after installation is done. Now, all dependencies are installed into the Python environment you choose, which will be used for development after this point. Run tests # 1 pdm run test The test suite is still simple and needs expansion! Please help write more test cases. Code style # PDM uses pre-commit for linting. Install pre-commit first, then: 1 2 pre-commit install pdm run lint PDM uses black for code style and isort for sorting import statements. If you are not following them, the CI will fail and your Pull Request will not be merged. News fragments # When you make changes such as fixing a bug or adding a feature, you must add a news fragment describing your change. News fragments are placed in the news/ directory, and should be named according to this pattern: <issue_num>.<issue_type>.md (e.g., 566.bugfix.md ). Issue Types # feature : Features and improvements bugfix : Bug fixes refactor : Code restructures doc : Added or improved documentation dep : Changes to dependencies removal : Removals or deprecations in the API misc : Miscellaneous changes that don't fit any of the other categories The contents of the file should be a single sentence in the imperative mood that describes your changes. (e.g., Deduplicate the plugins list. ) See entries in the Change Log for more examples. Preview the documentation # If you make some changes to the docs/ and you want to preview the build result, simply do: 1 pdm run doc","title":"Contributing"},{"location":"dev/contributing/#contributing-to-pdm","text":"First off, thanks for taking the time to contribute! Contributions include but are not restricted to: Reporting bugs Contributing to code Writing tests Writing documentation The following is a set of guidelines for contributing.","title":"Contributing to PDM"},{"location":"dev/contributing/#a-recommended-flow-of-contributing-to-an-open-source-project","text":"This section is for beginners to OSS. If you are an experienced OSS developer, you can skip this section. First, fork this project to your own namespace using the fork button at the top right of the repository page. Clone the upstream repository to local: 1 2 3 git clone https://github.com/pdm-project/pdm.git # Or if you prefer SSH clone: git clone git@github.com:pdm-project/pdm.git Add the fork as a new remote: 1 2 git remote add fork https://github.com/yourname/pdm.git git fetch fork where fork is the remote name of the fork repository. ProTips: Don't modify code on the main branch, the main branch should always keep track of origin/main. To update main branch to date: 1 2 3 git pull origin main # In rare cases that your local main branch diverges from the remote main: git fetch origin && git reset --hard main Create a new branch based on the up-to-date main branch for new patches. Create a Pull Request from that patch branch.","title":"A recommended flow of contributing to an Open Source project"},{"location":"dev/contributing/#local-development","text":"To make sure the test suites can run correctly, you need to install Git LFS , then 1 2 3 git lfs install # If you have already cloned the repository, execute the below command as well. git lfs pull Then, you need to install base dependencies in a venv. Make sure your pip is newer than 21.3 to install PDM in develop/editable mode. 1 2 python -m pip install -U \"pip>=21.3\" python -m pip install -e . You are free to create a virtualenv with either venv module or virtualenv tool for the development. If you are doing so, you may also need to set pdm config use_venv true after installation is done. Now, all dependencies are installed into the Python environment you choose, which will be used for development after this point.","title":"Local development"},{"location":"dev/contributing/#run-tests","text":"1 pdm run test The test suite is still simple and needs expansion! Please help write more test cases.","title":"Run tests"},{"location":"dev/contributing/#code-style","text":"PDM uses pre-commit for linting. Install pre-commit first, then: 1 2 pre-commit install pdm run lint PDM uses black for code style and isort for sorting import statements. If you are not following them, the CI will fail and your Pull Request will not be merged.","title":"Code style"},{"location":"dev/contributing/#news-fragments","text":"When you make changes such as fixing a bug or adding a feature, you must add a news fragment describing your change. News fragments are placed in the news/ directory, and should be named according to this pattern: <issue_num>.<issue_type>.md (e.g., 566.bugfix.md ).","title":"News fragments"},{"location":"dev/contributing/#issue-types","text":"feature : Features and improvements bugfix : Bug fixes refactor : Code restructures doc : Added or improved documentation dep : Changes to dependencies removal : Removals or deprecations in the API misc : Miscellaneous changes that don't fit any of the other categories The contents of the file should be a single sentence in the imperative mood that describes your changes. (e.g., Deduplicate the plugins list. ) See entries in the Change Log for more examples.","title":"Issue Types"},{"location":"dev/contributing/#preview-the-documentation","text":"If you make some changes to the docs/ and you want to preview the build result, simply do: 1 pdm run doc","title":"Preview the documentation"},{"location":"plugin/reference/","text":"API Reference # pdm.core.Core # A high level object that manages all classes and configurations add_config ( name , config_item ) staticmethod # Add a config item to the configuration class. Parameters: Name Type Description Default name str The name of the config item required config_item pdm . project . config . ConfigItem The config item to add required create_project ( root_path = None , is_global = False , global_config = None ) # Create a new project object Parameters: Name Type Description Default root_path PathLike The path to the project root directory None is_global bool Whether the project is a global project False global_config str The path to the global config file None Returns: Type Description Project The project object load_plugins () # Import and load plugins under pdm.plugin namespace A plugin is a callable that accepts the core object as the only argument. Example 1 2 def my_plugin ( core : pdm . core . Core ) -> None : ... main ( args = None , prog_name = None , obj = None , ** extra ) # The main entry function register_command ( command , name = None ) # Register a subcommand to the subparsers, with an optional name of the subcommand. Parameters: Name Type Description Default command Type [ pdm . cli . commands . base . BaseCommand ] The command class to register required name str The name of the subcommand, if not given, command.name is used None Signals # New in version 1.12.0 The signal definition for PDM. Example 1 2 3 4 5 6 7 8 9 10 from pdm.signals import post_init , post_install def on_post_init ( project ): project . core . ui . echo ( \"Project initialized\" ) # Connect to the signal post_init . connect ( on_post_init ) # Or use as a decorator @post_install . connect def on_post_install ( project , candidates , dry_run ): project . core . ui . echo ( \"Project install succeeded\" ) post_build : NamedSignal = pdm_signals . signal ( 'post_build' ) module-attribute # post_init : NamedSignal = pdm_signals . signal ( 'post_init' ) module-attribute # post_install : NamedSignal = pdm_signals . signal ( 'post_install' ) module-attribute # post_lock : NamedSignal = pdm_signals . signal ( 'post_lock' ) module-attribute # pre_build : NamedSignal = pdm_signals . signal ( 'pre_build' ) module-attribute # pre_install : NamedSignal = pdm_signals . signal ( 'pre_install' ) module-attribute # pre_lock : NamedSignal = pdm_signals . signal ( 'pre_lock' ) module-attribute #","title":"API Reference"},{"location":"plugin/reference/#api-reference","text":"","title":"API Reference"},{"location":"plugin/reference/#pdm.core.Core","text":"A high level object that manages all classes and configurations","title":"Core"},{"location":"plugin/reference/#pdm.core.Core.add_config","text":"Add a config item to the configuration class. Parameters: Name Type Description Default name str The name of the config item required config_item pdm . project . config . ConfigItem The config item to add required","title":"add_config()"},{"location":"plugin/reference/#pdm.core.Core.create_project","text":"Create a new project object Parameters: Name Type Description Default root_path PathLike The path to the project root directory None is_global bool Whether the project is a global project False global_config str The path to the global config file None Returns: Type Description Project The project object","title":"create_project()"},{"location":"plugin/reference/#pdm.core.Core.load_plugins","text":"Import and load plugins under pdm.plugin namespace A plugin is a callable that accepts the core object as the only argument. Example 1 2 def my_plugin ( core : pdm . core . Core ) -> None : ...","title":"load_plugins()"},{"location":"plugin/reference/#pdm.core.Core.main","text":"The main entry function","title":"main()"},{"location":"plugin/reference/#pdm.core.Core.register_command","text":"Register a subcommand to the subparsers, with an optional name of the subcommand. Parameters: Name Type Description Default command Type [ pdm . cli . commands . base . BaseCommand ] The command class to register required name str The name of the subcommand, if not given, command.name is used None","title":"register_command()"},{"location":"plugin/reference/#signals","text":"New in version 1.12.0 The signal definition for PDM. Example 1 2 3 4 5 6 7 8 9 10 from pdm.signals import post_init , post_install def on_post_init ( project ): project . core . ui . echo ( \"Project initialized\" ) # Connect to the signal post_init . connect ( on_post_init ) # Or use as a decorator @post_install . connect def on_post_install ( project , candidates , dry_run ): project . core . ui . echo ( \"Project install succeeded\" )","title":"Signals"},{"location":"plugin/reference/#pdm.signals.post_build","text":"","title":"post_build"},{"location":"plugin/reference/#pdm.signals.post_init","text":"","title":"post_init"},{"location":"plugin/reference/#pdm.signals.post_install","text":"","title":"post_install"},{"location":"plugin/reference/#pdm.signals.post_lock","text":"","title":"post_lock"},{"location":"plugin/reference/#pdm.signals.pre_build","text":"","title":"pre_build"},{"location":"plugin/reference/#pdm.signals.pre_install","text":"","title":"pre_install"},{"location":"plugin/reference/#pdm.signals.pre_lock","text":"","title":"pre_lock"},{"location":"plugin/write/","text":"Write a plugin # PDM is aiming at being a community driven package manager. It is shipped with a full-featured plug-in system, with which you can: Develop a new command for PDM Add additional options to existing PDM commands Change PDM's behavior by reading additional config items Control the process of dependency resolution or installation What should a plugin do # The core PDM project focuses on dependency management and package publishing. Other functionalities you wish to integrate with PDM are preferred to lie in their own plugins and released as standalone PyPI projects. In case the plugin is considered a good supplement of the core project it may have a chance to be absorbed into PDM. Write your own plugin # In the following sections, I will show an example of adding a new command hello which reads the hello.name config. Write the command # The PDM's CLI module is designed in a way that user can easily \"inherit and modify\". To write a new command: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from pdm.cli.commands.base import BaseCommand class HelloCommand ( BaseCommand ): \"\"\"Say hello to the specified person. If none is given, will read from \"hello.name\" config. \"\"\" def add_arguments ( self , parser ): parser . add_argument ( \"-n\" , \"--name\" , help = \"the person's name to whom you greet\" ) def handle ( self , project , options ): if not options . name : name = project . config [ \"hello.name\" ] else : name = options . name print ( f \"Hello, { name } \" ) First, let's create a new HelloCommand class inheriting from pdm.cli.commands.base.BaseCommand . It has two major functions: add_arguments() to manipulate the argument parser passed as the only argument, where you can add additional command line arguments to it handle() to do something when the subcommand is matched, you can do nothing by writing a single pass statement. It accepts two arguments: an pdm.project.Project object as the first one and the parsed argparse.Namespace object as the second. The document string will serve as the command help text, which will be shown in pdm --help . Besides, PDM's subcommand has two default options: -v/--verbose to change the verbosity level and -g/--global to enable global project. If you don't want these default options, override the arguments class attribute to a list of pdm.cli.options.Option objects, or assign it to an empty list to have no default options: 1 2 3 class HelloCommand ( BaseCommand ): arguments = [] Note The default options are loaded first, then add_arguments() is called. Register the command to the core object # Write a function somewhere in your plugin project. There is no limit on what the name of the function is, but the function should take only one argument -- the PDM core object: 1 2 def hello_plugin ( core ): core . register_command ( HelloCommand , \"hello\" ) Call core.register_command() to register the command. The second argument as the name of the subcommand is optional. PDM will look for the HelloCommand 's name attribute if the name is not passed. Add a new config item # Let's recall the first code snippet, hello.name config key is consulted for the name if not passed via the command line. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class HelloCommand ( BaseCommand ): \"\"\"Say hello to the specified person. If none is given, will read from \"hello.name\" config. \"\"\" def add_arguments ( self , parser ): parser . add_argument ( \"-n\" , \"--name\" , help = \"the person's name to whom you greet\" ) def handle ( self , project , options ): if not options . name : name = project . config [ \"hello.name\" ] else : name = options . name print ( f \"Hello, { name } \" ) Till now, if you query the config value by pdm config get hello.name , an error will pop up saying it is not a valid config key. You need to register the config item, too: 1 2 3 4 5 from pdm.project.config import ConfigItem def hello_plugin ( core ): core . register_command ( HelloCommand , \"hello\" ) core . add_config ( \"hello.name\" , ConfigItem ( \"The person's name\" , \"John\" )) where ConfigItem class takes 4 parameters, in the following order: description : a description of the config item default : default value of the config item global_only : whether the config is allowed to set in home config only env_var : the name of environment variable which will be read as the config value Other plugin points # Besides of commands and configurations, the core object exposes some other methods and attributes to override. PDM also provides some signals you can listen to. Please read the API reference for more details. Tips about developing a PDM plugin. # When developing a plugin, one hopes to activate and plugin in development and get updated when the code changes. This is usually done by pip install -e . or python setup.py develop in the traditional Python packaging world which leverages setup.py to do so. However, as there is no such setup.py in a PDM project, how can we do that? Fortunately, it becomes even easier with PDM and PEP 582. First, you should enable PEP 582 globally following the corresponding part of this doc . Then you just need to install all dependencies into the __pypackages__ directory by: 1 pdm install After that, all the dependencies are available with a compatible Python interpreter, including the plugin itself, in editable mode. That means any change to the codebase will take effect immediately without re-installation. The pdm executable also uses a Python interpreter under the hood, so if you run pdm from inside the plugin project, the plugin in development will be activated automatically, and you can do some testing to see how it works. That is how PEP 582 benefits our development workflow. Publish your plugin # Now you have defined your plugin already, let's distribute it to PyPI. PDM's plugins are discovered by entry point types. Create an pdm entry point and point to your plugin callable (yeah, it doesn't need to be a function, any callable object can work): PEP 621 : 1 2 3 4 # pyproject.toml [project.entry-points.pdm] hello = \"my_plugin:hello_plugin\" setuptools : 1 2 3 4 5 6 7 # setup.py setup ( ... entry_points = { \"pdm\" : [ \"hello = my_plugin:hello_plugin\" ]} ... ) Activate the plugin # As plugins are loaded via entry points, they can be activated with no more steps than just installing the plugin. For convenience, PDM provides a plugin command group to manage plugins. Assume your plugin is published as pdm-hello : 1 pdm plugin add pdm-hello Now type pdm --help in the terminal, you will see the new added hello command and use it: 1 2 $ pdm hello Jack Hello, Jack See more plugin management subcommands by typing pdm plugin --help in the terminal.","title":"Write a plugin"},{"location":"plugin/write/#write-a-plugin","text":"PDM is aiming at being a community driven package manager. It is shipped with a full-featured plug-in system, with which you can: Develop a new command for PDM Add additional options to existing PDM commands Change PDM's behavior by reading additional config items Control the process of dependency resolution or installation","title":"Write a plugin"},{"location":"plugin/write/#what-should-a-plugin-do","text":"The core PDM project focuses on dependency management and package publishing. Other functionalities you wish to integrate with PDM are preferred to lie in their own plugins and released as standalone PyPI projects. In case the plugin is considered a good supplement of the core project it may have a chance to be absorbed into PDM.","title":"What should a plugin do"},{"location":"plugin/write/#write-your-own-plugin","text":"In the following sections, I will show an example of adding a new command hello which reads the hello.name config.","title":"Write your own plugin"},{"location":"plugin/write/#write-the-command","text":"The PDM's CLI module is designed in a way that user can easily \"inherit and modify\". To write a new command: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from pdm.cli.commands.base import BaseCommand class HelloCommand ( BaseCommand ): \"\"\"Say hello to the specified person. If none is given, will read from \"hello.name\" config. \"\"\" def add_arguments ( self , parser ): parser . add_argument ( \"-n\" , \"--name\" , help = \"the person's name to whom you greet\" ) def handle ( self , project , options ): if not options . name : name = project . config [ \"hello.name\" ] else : name = options . name print ( f \"Hello, { name } \" ) First, let's create a new HelloCommand class inheriting from pdm.cli.commands.base.BaseCommand . It has two major functions: add_arguments() to manipulate the argument parser passed as the only argument, where you can add additional command line arguments to it handle() to do something when the subcommand is matched, you can do nothing by writing a single pass statement. It accepts two arguments: an pdm.project.Project object as the first one and the parsed argparse.Namespace object as the second. The document string will serve as the command help text, which will be shown in pdm --help . Besides, PDM's subcommand has two default options: -v/--verbose to change the verbosity level and -g/--global to enable global project. If you don't want these default options, override the arguments class attribute to a list of pdm.cli.options.Option objects, or assign it to an empty list to have no default options: 1 2 3 class HelloCommand ( BaseCommand ): arguments = [] Note The default options are loaded first, then add_arguments() is called.","title":"Write the command"},{"location":"plugin/write/#register-the-command-to-the-core-object","text":"Write a function somewhere in your plugin project. There is no limit on what the name of the function is, but the function should take only one argument -- the PDM core object: 1 2 def hello_plugin ( core ): core . register_command ( HelloCommand , \"hello\" ) Call core.register_command() to register the command. The second argument as the name of the subcommand is optional. PDM will look for the HelloCommand 's name attribute if the name is not passed.","title":"Register the command to the core object"},{"location":"plugin/write/#add-a-new-config-item","text":"Let's recall the first code snippet, hello.name config key is consulted for the name if not passed via the command line. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class HelloCommand ( BaseCommand ): \"\"\"Say hello to the specified person. If none is given, will read from \"hello.name\" config. \"\"\" def add_arguments ( self , parser ): parser . add_argument ( \"-n\" , \"--name\" , help = \"the person's name to whom you greet\" ) def handle ( self , project , options ): if not options . name : name = project . config [ \"hello.name\" ] else : name = options . name print ( f \"Hello, { name } \" ) Till now, if you query the config value by pdm config get hello.name , an error will pop up saying it is not a valid config key. You need to register the config item, too: 1 2 3 4 5 from pdm.project.config import ConfigItem def hello_plugin ( core ): core . register_command ( HelloCommand , \"hello\" ) core . add_config ( \"hello.name\" , ConfigItem ( \"The person's name\" , \"John\" )) where ConfigItem class takes 4 parameters, in the following order: description : a description of the config item default : default value of the config item global_only : whether the config is allowed to set in home config only env_var : the name of environment variable which will be read as the config value","title":"Add a new config item"},{"location":"plugin/write/#other-plugin-points","text":"Besides of commands and configurations, the core object exposes some other methods and attributes to override. PDM also provides some signals you can listen to. Please read the API reference for more details.","title":"Other plugin points"},{"location":"plugin/write/#tips-about-developing-a-pdm-plugin","text":"When developing a plugin, one hopes to activate and plugin in development and get updated when the code changes. This is usually done by pip install -e . or python setup.py develop in the traditional Python packaging world which leverages setup.py to do so. However, as there is no such setup.py in a PDM project, how can we do that? Fortunately, it becomes even easier with PDM and PEP 582. First, you should enable PEP 582 globally following the corresponding part of this doc . Then you just need to install all dependencies into the __pypackages__ directory by: 1 pdm install After that, all the dependencies are available with a compatible Python interpreter, including the plugin itself, in editable mode. That means any change to the codebase will take effect immediately without re-installation. The pdm executable also uses a Python interpreter under the hood, so if you run pdm from inside the plugin project, the plugin in development will be activated automatically, and you can do some testing to see how it works. That is how PEP 582 benefits our development workflow.","title":"Tips about developing a PDM plugin."},{"location":"plugin/write/#publish-your-plugin","text":"Now you have defined your plugin already, let's distribute it to PyPI. PDM's plugins are discovered by entry point types. Create an pdm entry point and point to your plugin callable (yeah, it doesn't need to be a function, any callable object can work): PEP 621 : 1 2 3 4 # pyproject.toml [project.entry-points.pdm] hello = \"my_plugin:hello_plugin\" setuptools : 1 2 3 4 5 6 7 # setup.py setup ( ... entry_points = { \"pdm\" : [ \"hello = my_plugin:hello_plugin\" ]} ... )","title":"Publish your plugin"},{"location":"plugin/write/#activate-the-plugin","text":"As plugins are loaded via entry points, they can be activated with no more steps than just installing the plugin. For convenience, PDM provides a plugin command group to manage plugins. Assume your plugin is published as pdm-hello : 1 pdm plugin add pdm-hello Now type pdm --help in the terminal, you will see the new added hello command and use it: 1 2 $ pdm hello Jack Hello, Jack See more plugin management subcommands by typing pdm plugin --help in the terminal.","title":"Activate the plugin"},{"location":"pyproject/pep621/","text":"PEP 621 Metadata # The standard format and all metadata fields are defined by PEP 621 and PEP 639 . View the PEPs for the detailed specification. These metadata are stored in [project] table of pyproject.toml . In the following part of this document, metadata should be written under [project] table if not given explicitly. Multiline description # You can split a long description onto multiple lines, thanks to TOML support for multiline strings. Just remember to escape new lines, so the final description appears on one line only in your package metadata . Indentation will be removed as well when escaping new lines: 1 2 3 4 5 6 description = \"\"\"\\ Lorem ipsum dolor sit amet, consectetur adipiscing elit, \\ sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \\ Ut enim ad minim veniam, quis nostrud exercitation ullamco \\ laboris nisi ut aliquip ex ea commodo consequat.\\ \"\"\" See TOML's specification on strings . Determine the package version dynamically # The package version can be retrieved from the __version__ variable of a given file. To do this, put the following under the [tool.pdm] table: 1 2 [tool.pdm] version = { from = \"mypackage/__init__.py\" } Remember set dynamic = [\"version\"] in [project] metadata. PDM can also read version from SCM tags. If you are using git or hg as the version control system, define the version as follows: 1 2 [tool.pdm] version = { use_scm = true } In either case, you MUST delete the version field from the [project] table, and include version in the dynamic field, or the backend will raise an error: 1 dynamic = [ \"version\" ] Dependency specification # The project.dependencies is an array of dependency specification strings following the PEP 440 and PEP 508 . Examples: 1 2 3 4 5 6 7 8 9 10 dependencies = [ # Named requirement \"requests\" , # Named requirement with version specifier \"flask >= 1.1.0\" , # Requirement with environment marker \"pywin32; sys_platform == 'win32'\" , # URL requirement \"pip @ git+https://github.com/pypa/pip.git@20.3.1\" ] Editable requirement # Beside of the normal dependency specifications, one can also have some packages installed in editable mode. The editable specification string format is the same as Pip's editable install mode . Examples: 1 2 3 4 5 dependencies = [ ..., \"-e path/to/SomeProject\", \"-e git+http://repo/my_project.git#egg=SomeProject\" ] About editable installation One can have editable installation and normal installation for the same package. The one that comes at last wins. However, editable dependencies WON'T be included in the metadata of the built artifacts since they are not valid PEP 508 strings. They only exist for development purpose. Optional dependencies # You can have some requirements optional, which is similar to setuptools ' extras_require parameter. 1 2 3 4 5 6 7 [project.optional-dependencies] socks = [ 'PySocks >= 1.5.6, != 1.5.7, < 2' ] tests = [ 'ddt >= 1.2.2, < 2' , 'pytest < 6' , 'mock >= 1.0.1, < 4; python_version < \"3.4\"' , ] To install a group of optional dependencies: 1 pdm install -G socks -G option can be given multiple times to include more than one group. Console scripts # The following content: 1 2 [project.scripts] mycli = \"mycli.__main__:main\" will be translated to setuptools style: 1 2 3 4 5 entry_points = { 'console_scripts' : [ 'mycli=mycli.__main__:main' ] } Also, [project.gui-scripts] will be translated to gui_scripts entry points group in setuptools style. Entry points # Other types of entry points are given by [project.entry-points.<type>] section, with the same format of [project.scripts] : 1 2 [project.entry-points.pytest11] myplugin = \"mypackage.plugin:pytest_plugin\"","title":"PEP 621 Metadata"},{"location":"pyproject/pep621/#pep-621-metadata","text":"The standard format and all metadata fields are defined by PEP 621 and PEP 639 . View the PEPs for the detailed specification. These metadata are stored in [project] table of pyproject.toml . In the following part of this document, metadata should be written under [project] table if not given explicitly.","title":"PEP 621 Metadata"},{"location":"pyproject/pep621/#multiline-description","text":"You can split a long description onto multiple lines, thanks to TOML support for multiline strings. Just remember to escape new lines, so the final description appears on one line only in your package metadata . Indentation will be removed as well when escaping new lines: 1 2 3 4 5 6 description = \"\"\"\\ Lorem ipsum dolor sit amet, consectetur adipiscing elit, \\ sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \\ Ut enim ad minim veniam, quis nostrud exercitation ullamco \\ laboris nisi ut aliquip ex ea commodo consequat.\\ \"\"\" See TOML's specification on strings .","title":"Multiline description"},{"location":"pyproject/pep621/#determine-the-package-version-dynamically","text":"The package version can be retrieved from the __version__ variable of a given file. To do this, put the following under the [tool.pdm] table: 1 2 [tool.pdm] version = { from = \"mypackage/__init__.py\" } Remember set dynamic = [\"version\"] in [project] metadata. PDM can also read version from SCM tags. If you are using git or hg as the version control system, define the version as follows: 1 2 [tool.pdm] version = { use_scm = true } In either case, you MUST delete the version field from the [project] table, and include version in the dynamic field, or the backend will raise an error: 1 dynamic = [ \"version\" ]","title":"Determine the package version dynamically"},{"location":"pyproject/pep621/#dependency-specification","text":"The project.dependencies is an array of dependency specification strings following the PEP 440 and PEP 508 . Examples: 1 2 3 4 5 6 7 8 9 10 dependencies = [ # Named requirement \"requests\" , # Named requirement with version specifier \"flask >= 1.1.0\" , # Requirement with environment marker \"pywin32; sys_platform == 'win32'\" , # URL requirement \"pip @ git+https://github.com/pypa/pip.git@20.3.1\" ]","title":"Dependency specification"},{"location":"pyproject/pep621/#editable-requirement","text":"Beside of the normal dependency specifications, one can also have some packages installed in editable mode. The editable specification string format is the same as Pip's editable install mode . Examples: 1 2 3 4 5 dependencies = [ ..., \"-e path/to/SomeProject\", \"-e git+http://repo/my_project.git#egg=SomeProject\" ] About editable installation One can have editable installation and normal installation for the same package. The one that comes at last wins. However, editable dependencies WON'T be included in the metadata of the built artifacts since they are not valid PEP 508 strings. They only exist for development purpose.","title":"Editable requirement"},{"location":"pyproject/pep621/#optional-dependencies","text":"You can have some requirements optional, which is similar to setuptools ' extras_require parameter. 1 2 3 4 5 6 7 [project.optional-dependencies] socks = [ 'PySocks >= 1.5.6, != 1.5.7, < 2' ] tests = [ 'ddt >= 1.2.2, < 2' , 'pytest < 6' , 'mock >= 1.0.1, < 4; python_version < \"3.4\"' , ] To install a group of optional dependencies: 1 pdm install -G socks -G option can be given multiple times to include more than one group.","title":"Optional dependencies"},{"location":"pyproject/pep621/#console-scripts","text":"The following content: 1 2 [project.scripts] mycli = \"mycli.__main__:main\" will be translated to setuptools style: 1 2 3 4 5 entry_points = { 'console_scripts' : [ 'mycli=mycli.__main__:main' ] } Also, [project.gui-scripts] will be translated to gui_scripts entry points group in setuptools style.","title":"Console scripts"},{"location":"pyproject/pep621/#entry-points","text":"Other types of entry points are given by [project.entry-points.<type>] section, with the same format of [project.scripts] : 1 2 [project.entry-points.pytest11] myplugin = \"mypackage.plugin:pytest_plugin\"","title":"Entry points"},{"location":"pyproject/tool-pdm/","text":"PDM Tool Settings # There are also some useful settings to control the packaging behavior of PDM. They should be shipped with pyproject.toml , defined in [tool.pdm] table. Development dependencies # You can have several groups of development only dependencies. Unlike optional-dependencies , they won't appear in the package distribution metadata such as PKG-INFO or METADATA . And the package index won't be aware of these dependencies. The schema is similar to that of optional-dependencies , except that it is in tool.pdm table. 1 2 3 4 5 6 7 [tool.pdm.dev-dependencies] lint = [ \"flake8\" , \"black\" ] test = [ \"pytest\" , \"pytest-cov\" ] doc = [ \"mkdocs\" ] To install all of them: 1 pdm install For more CLI usage, please refer to Manage Dependencies Specify other sources for finding packages # Like Pipenv, you can specify extra sources for finding packages with the same format. They are stored in an array of table named [[tool.pdm.source]] in pyproject.toml : 1 2 3 4 [[tool.pdm.source]] url = \"https://private-site.org/pypi/simple\" verify_ssl = true name = \"internal\" This works as if --extra-index-url https://private-site.org/pypi/simple is passed. Or you can override the pypi.url value by using a source named pypi : 1 2 3 4 [[tool.pdm.source]] url = \"https://private.pypi.org/simple\" verify_ssl = true name = \"pypi\" By default, or sources are PEP 503 style \"index urls\" like pip's --index-url and --extra-url , however, you can also specify \"find links\" with type = \"find_links\" . See this answer for the difference between the two types. For example, to install from a local directory containing package files: 1 2 3 4 [[tool.pdm.source]] url = \"file:///path/to/packages\" name = \"local\" type = \"find_links\" Difference from changing config value When you want all packages to be fetched from the given index instead of the default one, despite what platform your are on or who is to deploy the app, write it in the [[tool.pdm.source]] . Otherwise if you would like to change the index temporarily on the current platform (for network reasons), you should use pdm config pypi.url https://private.pypi.org/simple . Include and exclude package files # The way of specifying include and exclude files are simple, they are given as a list of glob patterns: 1 2 3 4 5 6 7 includes = [ \"**/*.json\" , \"mypackage/\" , ] excludes = [ \"mypackage/_temp/*\" ] In case you want some files to be included in sdist only, you use the source-includes field: 1 2 3 includes = [...] excludes = [...] source-includes = [ \"tests/\" ] Note that the files defined in source-includes will be excluded automatically from non-sdist builds. Default values for includes and excludes # If you don't specify any of these fields, PDM also provides smart default values to fit the most common workflows. Top-level packages will be included. tests package will be excluded from non-sdist builds. src directory will be detected as the package-dir if it exists. If your project follows the above conventions you don't need to config any of these fields and it just works. Be aware PDM won't add PEP 420 implicit namespace packages automatically and they should always be specified in includes explicitly. Select another package directory to look for packages # Similar to setuptools ' package_dir setting, one can specify another package directory, such as src , in pyproject.toml easily: 1 package-dir = \"src\" If no package directory is given, PDM can also recognize src as the package-dir implicitly if: src/__init__.py doesn't exist, meaning it is not a valid Python package, and There exist some packages under src/* . Implicit namespace packages # As specified in PEP 420 , a directory will be recognized as a namespace package if: <package>/__init__.py doesn't exist, and There exist normal packages and/or other namespace packages under <package>/* , and <package> is explicitly listed in includes Build Platform-specific Wheels # You may want to build platform-specific wheels if it contains binaries. Currently, building C extensions still relies on setuptools . You should write a python script with a function named build which accepts the kwargs of setup() as the argument. Then, update the dictionary with your ext_modules settings in the function. Here is an example taken from MarkupSafe : 1 2 3 4 5 6 7 # build.py from setuptools import Extension ext_modules = [ Extension ( \"markupsafe._speedups\" , [ \"src/markupsafe/_speedups.c\" ])] def build ( setup_kwargs ): setup_kwargs . update ( ext_modules = ext_modules ) Now, specify the build script path via build in the pyproject.toml : 1 2 3 # pyproject.toml [tool.pdm] build = \"build.py\" If you run pdm build (or any other build frontends such as build ), PDM will build a platform-specific wheel file as well as a sdist. By default, every build is performed in a clean and isolated environment, only build requirements can be seen. If your build has optional requirements that depend on the project environment, you can turn off the environment isolation by pdm build --no-isolation or setting config build_isolation to falsey value. Override the \"Is-Purelib\" value # Sometimes you may want to build platform-specific wheels but don't have a build script(the binaries may be built or fetched by other tools). In this case you can set the is-purelib value in the pyproject.toml to false : 1 2 [tool.pdm] is-purelib = false Editable build backend # PDM leverages PEP 660 to build wheels for editable installation. One can choose how to generate the wheel out of the two methods: path : (Default)The legacy method used by setuptools that create .pth files under the packages path. editables : Create proxy modules under the packages path. Since the proxy module is looked for at runtime, it may not work with some static analysis tools. Read the PEP for the difference of the two methods and how they work. Specify the method in pyproject.toml like below: 1 2 [tool.pdm] editable-backend = \"path\" editables backend is more recommended but there is a known limitation that it can't work with PEP 420 namespace packages. So you would need to change to path in that case. About Python 2 compatibility Due to the fact that the build backend for PDM managed projects requires Python>=3.6, you would not be able to install the current project if Python 2 is being used as the host interpreter. You can still install other dependencies not PDM-backed.","title":"PDM Tool Settings"},{"location":"pyproject/tool-pdm/#pdm-tool-settings","text":"There are also some useful settings to control the packaging behavior of PDM. They should be shipped with pyproject.toml , defined in [tool.pdm] table.","title":"PDM Tool Settings"},{"location":"pyproject/tool-pdm/#development-dependencies","text":"You can have several groups of development only dependencies. Unlike optional-dependencies , they won't appear in the package distribution metadata such as PKG-INFO or METADATA . And the package index won't be aware of these dependencies. The schema is similar to that of optional-dependencies , except that it is in tool.pdm table. 1 2 3 4 5 6 7 [tool.pdm.dev-dependencies] lint = [ \"flake8\" , \"black\" ] test = [ \"pytest\" , \"pytest-cov\" ] doc = [ \"mkdocs\" ] To install all of them: 1 pdm install For more CLI usage, please refer to Manage Dependencies","title":"Development dependencies"},{"location":"pyproject/tool-pdm/#specify-other-sources-for-finding-packages","text":"Like Pipenv, you can specify extra sources for finding packages with the same format. They are stored in an array of table named [[tool.pdm.source]] in pyproject.toml : 1 2 3 4 [[tool.pdm.source]] url = \"https://private-site.org/pypi/simple\" verify_ssl = true name = \"internal\" This works as if --extra-index-url https://private-site.org/pypi/simple is passed. Or you can override the pypi.url value by using a source named pypi : 1 2 3 4 [[tool.pdm.source]] url = \"https://private.pypi.org/simple\" verify_ssl = true name = \"pypi\" By default, or sources are PEP 503 style \"index urls\" like pip's --index-url and --extra-url , however, you can also specify \"find links\" with type = \"find_links\" . See this answer for the difference between the two types. For example, to install from a local directory containing package files: 1 2 3 4 [[tool.pdm.source]] url = \"file:///path/to/packages\" name = \"local\" type = \"find_links\" Difference from changing config value When you want all packages to be fetched from the given index instead of the default one, despite what platform your are on or who is to deploy the app, write it in the [[tool.pdm.source]] . Otherwise if you would like to change the index temporarily on the current platform (for network reasons), you should use pdm config pypi.url https://private.pypi.org/simple .","title":"Specify other sources for finding packages"},{"location":"pyproject/tool-pdm/#include-and-exclude-package-files","text":"The way of specifying include and exclude files are simple, they are given as a list of glob patterns: 1 2 3 4 5 6 7 includes = [ \"**/*.json\" , \"mypackage/\" , ] excludes = [ \"mypackage/_temp/*\" ] In case you want some files to be included in sdist only, you use the source-includes field: 1 2 3 includes = [...] excludes = [...] source-includes = [ \"tests/\" ] Note that the files defined in source-includes will be excluded automatically from non-sdist builds.","title":"Include and exclude package files"},{"location":"pyproject/tool-pdm/#default-values-for-includes-and-excludes","text":"If you don't specify any of these fields, PDM also provides smart default values to fit the most common workflows. Top-level packages will be included. tests package will be excluded from non-sdist builds. src directory will be detected as the package-dir if it exists. If your project follows the above conventions you don't need to config any of these fields and it just works. Be aware PDM won't add PEP 420 implicit namespace packages automatically and they should always be specified in includes explicitly.","title":"Default values for includes and excludes"},{"location":"pyproject/tool-pdm/#select-another-package-directory-to-look-for-packages","text":"Similar to setuptools ' package_dir setting, one can specify another package directory, such as src , in pyproject.toml easily: 1 package-dir = \"src\" If no package directory is given, PDM can also recognize src as the package-dir implicitly if: src/__init__.py doesn't exist, meaning it is not a valid Python package, and There exist some packages under src/* .","title":"Select another package directory to look for packages"},{"location":"pyproject/tool-pdm/#implicit-namespace-packages","text":"As specified in PEP 420 , a directory will be recognized as a namespace package if: <package>/__init__.py doesn't exist, and There exist normal packages and/or other namespace packages under <package>/* , and <package> is explicitly listed in includes","title":"Implicit namespace packages"},{"location":"pyproject/tool-pdm/#build-platform-specific-wheels","text":"You may want to build platform-specific wheels if it contains binaries. Currently, building C extensions still relies on setuptools . You should write a python script with a function named build which accepts the kwargs of setup() as the argument. Then, update the dictionary with your ext_modules settings in the function. Here is an example taken from MarkupSafe : 1 2 3 4 5 6 7 # build.py from setuptools import Extension ext_modules = [ Extension ( \"markupsafe._speedups\" , [ \"src/markupsafe/_speedups.c\" ])] def build ( setup_kwargs ): setup_kwargs . update ( ext_modules = ext_modules ) Now, specify the build script path via build in the pyproject.toml : 1 2 3 # pyproject.toml [tool.pdm] build = \"build.py\" If you run pdm build (or any other build frontends such as build ), PDM will build a platform-specific wheel file as well as a sdist. By default, every build is performed in a clean and isolated environment, only build requirements can be seen. If your build has optional requirements that depend on the project environment, you can turn off the environment isolation by pdm build --no-isolation or setting config build_isolation to falsey value.","title":"Build Platform-specific Wheels"},{"location":"pyproject/tool-pdm/#override-the-is-purelib-value","text":"Sometimes you may want to build platform-specific wheels but don't have a build script(the binaries may be built or fetched by other tools). In this case you can set the is-purelib value in the pyproject.toml to false : 1 2 [tool.pdm] is-purelib = false","title":"Override the \"Is-Purelib\" value"},{"location":"pyproject/tool-pdm/#editable-build-backend","text":"PDM leverages PEP 660 to build wheels for editable installation. One can choose how to generate the wheel out of the two methods: path : (Default)The legacy method used by setuptools that create .pth files under the packages path. editables : Create proxy modules under the packages path. Since the proxy module is looked for at runtime, it may not work with some static analysis tools. Read the PEP for the difference of the two methods and how they work. Specify the method in pyproject.toml like below: 1 2 [tool.pdm] editable-backend = \"path\" editables backend is more recommended but there is a known limitation that it can't work with PEP 420 namespace packages. So you would need to change to path in that case. About Python 2 compatibility Due to the fact that the build backend for PDM managed projects requires Python>=3.6, you would not be able to install the current project if Python 2 is being used as the host interpreter. You can still install other dependencies not PDM-backed.","title":"Editable build backend"},{"location":"usage/advanced/","text":"Advanced Usage # Automatic Testing # Use Tox as the runner # Tox is a great tool for testing against multiple Python versions or dependency sets. You can configure a tox.ini like the following to integrate your testing with PDM: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 [tox] env_list = py{36,37,38},lint isolated_build = true [testenv] setenv = PDM_IGNORE_SAVED_PYTHON = \"1\" deps = pdm commands = pdm install --dev pytest tests [testenv:lint] deps = pdm commands = pdm install -G lint flake8 src/ To use the virtualenv created by Tox, you should make sure you have set pdm config use_venv true . PDM then will install dependencies from pdm.lock into the virtualenv. In the dedicated venv you can directly run tools by pytest tests/ instead of pdm run pytest tests/ . You should also make sure you don't run pdm add/pdm remove/pdm update/pdm lock in the test commands, otherwise the pdm.lock file will be modified unexpectedly. Additional dependencies can be supplied with the deps config. Besides, isolated_buid and passenv config should be set as the above example to make PDM work properly. To get rid of these constraints, there is a Tox plugin tox-pdm which can ease the usage. You can install it by 1 pip install tox-pdm Or, 1 pdm add --dev tox-pdm And you can make the tox.ini much tidier as following, : 1 2 3 4 5 6 7 8 9 10 11 12 [tox] env_list = py{36,37,38},lint [testenv] groups = dev commands = pytest tests [testenv:lint] groups = lint commands = flake8 src/ See the project's README for a detailed guidance. Use Nox as the runner # Nox is another great tool for automated testing. Unlike tox, Nox uses a standard Python file for configuration. It is much easier to use PDM in Nox, here is an example of noxfile.py : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import os import nox os . environ . update ({ \"PDM_IGNORE_SAVED_PYTHON\" : \"1\" }) @nox . session def tests ( session ): session . run ( 'pdm' , 'install' , '-G' , 'test' , external = True ) session . run ( 'pytest' ) @nox . session def lint ( session ): session . run ( 'pdm' , 'install' , '-G' , 'lint' , external = True ) session . run ( 'flake8' , '--import-order-style' , 'google' ) Note that PDM_IGNORE_SAVED_PYTHON should be set so that PDM can pick up the Python in the virtualenv correctly. Also make sure pdm is available in the PATH . Before running nox, you should also pdm config use_venv true to enable venv reusing. About PEP 582 __pypackages__ directory # By default, if you run tools by pdm run , __pypackages__ will be seen by the program and all subprocesses created by it. This means virtual environments created by those tools are also aware of the packages inside __pypackages__ , which result in unexpected behavior in some cases. For nox , you can avoid this by adding a line in noxfile.py : 1 os . environ . pop ( \"PYTHONPATH\" , None ) For tox , PYTHONPATH will not be passed to the test sessions so this isn't going to be a problem. Moreover, it is recommended to make nox and tox live in their own pipx environments so you don't need to install for every project. In this case, PEP 582 packages will not be a problem either. Use PDM in Continuous Integration # Only one thing to keep in mind -- PDM can't be installed on Python < 3.7, so if your project is to be tested on those Python versions, you have to make sure PDM is installed on the correct Python version, which can be different from the target Python version the particular job/task is run on. Fortunately, if you are using GitHub Action, there is pdm-project/setup-pdm to make this process easier. Here is an example workflow of GitHub Actions, while you can adapt it for other CI platforms. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Testing : runs-on : ${{ matrix.os }} strategy : matrix : python-version : [ 3.7 , 3.8 , 3.9 , \"3.10\" ] os : [ ubuntu-latest , macOS-latest , windows-latest ] steps : - uses : actions/checkout@v1 - name : Set up PDM uses : pdm-project/setup-pdm@main with : python-version : ${{ matrix.python-version }} - name : Install dependencies run : | pdm sync -d -G testing - name : Run Tests run : | pdm run -v pytest tests TIPS For GitHub Action users, there is a known compatibility issue on Ubuntu virtual environment. If PDM parallel install is failed on that machine you should either set parallel_install to false or set env LD_PRELOAD=/lib/x86_64-linux-gnu/libgcc_s.so.1 . It is already handled by the pdm-project/setup-pdm action. Note If your CI scripts run without a proper user set, you might get permission errors when PDM tries to create its cache directory. To work around this, you can set the HOME environment variable yourself, to a writable directory, for example: 1 export HOME = /tmp/home Use other PEP 517 backends # PDM supports ALL PEP 517 build backends that comply with PEP 621 specification. At the time of writing, flit is going to switch to PEP 621 metadata in the near future, then you can keep flit as the build-backend while still managing dependencies using PDM: 1 2 3 [build-system] requires = [ \"flit_core >=2,<4\" ] build-backend = \"flit_core.buildapi\" PDM will call the correct backend when pdm build . Use PDM in a multi-stage Dockerfile # It is possible to use PDM in a multi-stage Dockerfile to first install the project and dependencies into __pypackages__ and then copy this folder into the final stage, adding it to PYTHONPATH . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # build stage FROM python:3.8 AS builder # install PDM RUN pip install -U pip setuptools wheel RUN pip install pdm # copy files COPY pyproject.toml pdm.lock README.md /project/ COPY src/ /project/src # install dependencies and project WORKDIR /project RUN pdm install --prod --no-lock --no-editable # run stage FROM python:3.8 # retrieve packages from build stage ENV PYTHONPATH = /project/pkgs COPY --from = builder /project/__pypackages__/3.8/lib /project/pkgs # set command/entrypoint, adapt to fit your needs CMD [ \"python\" , \"-m\" , \"project\" ] Integrate with other IDE or editors # Work with lsp-python-ms in Emacs # Below is a sample code snippet showing how to make PDM work with lsp-python-ms in Emacs. Contributed by @linw1995 . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 ;; TODO: Cache result ( defun linw1995/pdm-get-python-executable ( &optional dir ) ( let (( pdm-get-python-cmd \"pdm info --python\" )) ( string-trim ( shell-command-to-string ( if dir ( concat \"cd \" dir \" && \" pdm-get-python-cmd ) pdm-get-python-cmd ))))) ( defun linw1995/pdm-get-packages-path ( &optional dir ) ( let (( pdm-get-packages-cmd \"pdm info --packages\" )) ( concat ( string-trim ( shell-command-to-string ( if dir ( concat \"cd \" dir \" && \" pdm-get-packages-cmd ) pdm-get-packages-cmd ))) \"/lib\" ))) ( use-package lsp-python-ms :ensure t :init ( setq lsp-python-ms-auto-install-server t ) :hook ( python-mode . ( lambda () ( setq lsp-python-ms-python-executable ( linw1995/pdm-get-python-executable )) ( setq lsp-python-ms-extra-paths ( vector ( linw1995/pdm-get-packages-path ))) ( require 'lsp-python-ms ) ( lsp )))) ; or lsp-deferred","title":"Advanced Usage"},{"location":"usage/advanced/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"usage/advanced/#automatic-testing","text":"","title":"Automatic Testing"},{"location":"usage/advanced/#use-tox-as-the-runner","text":"Tox is a great tool for testing against multiple Python versions or dependency sets. You can configure a tox.ini like the following to integrate your testing with PDM: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 [tox] env_list = py{36,37,38},lint isolated_build = true [testenv] setenv = PDM_IGNORE_SAVED_PYTHON = \"1\" deps = pdm commands = pdm install --dev pytest tests [testenv:lint] deps = pdm commands = pdm install -G lint flake8 src/ To use the virtualenv created by Tox, you should make sure you have set pdm config use_venv true . PDM then will install dependencies from pdm.lock into the virtualenv. In the dedicated venv you can directly run tools by pytest tests/ instead of pdm run pytest tests/ . You should also make sure you don't run pdm add/pdm remove/pdm update/pdm lock in the test commands, otherwise the pdm.lock file will be modified unexpectedly. Additional dependencies can be supplied with the deps config. Besides, isolated_buid and passenv config should be set as the above example to make PDM work properly. To get rid of these constraints, there is a Tox plugin tox-pdm which can ease the usage. You can install it by 1 pip install tox-pdm Or, 1 pdm add --dev tox-pdm And you can make the tox.ini much tidier as following, : 1 2 3 4 5 6 7 8 9 10 11 12 [tox] env_list = py{36,37,38},lint [testenv] groups = dev commands = pytest tests [testenv:lint] groups = lint commands = flake8 src/ See the project's README for a detailed guidance.","title":"Use Tox as the runner"},{"location":"usage/advanced/#use-nox-as-the-runner","text":"Nox is another great tool for automated testing. Unlike tox, Nox uses a standard Python file for configuration. It is much easier to use PDM in Nox, here is an example of noxfile.py : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import os import nox os . environ . update ({ \"PDM_IGNORE_SAVED_PYTHON\" : \"1\" }) @nox . session def tests ( session ): session . run ( 'pdm' , 'install' , '-G' , 'test' , external = True ) session . run ( 'pytest' ) @nox . session def lint ( session ): session . run ( 'pdm' , 'install' , '-G' , 'lint' , external = True ) session . run ( 'flake8' , '--import-order-style' , 'google' ) Note that PDM_IGNORE_SAVED_PYTHON should be set so that PDM can pick up the Python in the virtualenv correctly. Also make sure pdm is available in the PATH . Before running nox, you should also pdm config use_venv true to enable venv reusing.","title":"Use Nox as the runner"},{"location":"usage/advanced/#about-pep-582-__pypackages__-directory","text":"By default, if you run tools by pdm run , __pypackages__ will be seen by the program and all subprocesses created by it. This means virtual environments created by those tools are also aware of the packages inside __pypackages__ , which result in unexpected behavior in some cases. For nox , you can avoid this by adding a line in noxfile.py : 1 os . environ . pop ( \"PYTHONPATH\" , None ) For tox , PYTHONPATH will not be passed to the test sessions so this isn't going to be a problem. Moreover, it is recommended to make nox and tox live in their own pipx environments so you don't need to install for every project. In this case, PEP 582 packages will not be a problem either.","title":"About PEP 582 __pypackages__ directory"},{"location":"usage/advanced/#use-pdm-in-continuous-integration","text":"Only one thing to keep in mind -- PDM can't be installed on Python < 3.7, so if your project is to be tested on those Python versions, you have to make sure PDM is installed on the correct Python version, which can be different from the target Python version the particular job/task is run on. Fortunately, if you are using GitHub Action, there is pdm-project/setup-pdm to make this process easier. Here is an example workflow of GitHub Actions, while you can adapt it for other CI platforms. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Testing : runs-on : ${{ matrix.os }} strategy : matrix : python-version : [ 3.7 , 3.8 , 3.9 , \"3.10\" ] os : [ ubuntu-latest , macOS-latest , windows-latest ] steps : - uses : actions/checkout@v1 - name : Set up PDM uses : pdm-project/setup-pdm@main with : python-version : ${{ matrix.python-version }} - name : Install dependencies run : | pdm sync -d -G testing - name : Run Tests run : | pdm run -v pytest tests TIPS For GitHub Action users, there is a known compatibility issue on Ubuntu virtual environment. If PDM parallel install is failed on that machine you should either set parallel_install to false or set env LD_PRELOAD=/lib/x86_64-linux-gnu/libgcc_s.so.1 . It is already handled by the pdm-project/setup-pdm action. Note If your CI scripts run without a proper user set, you might get permission errors when PDM tries to create its cache directory. To work around this, you can set the HOME environment variable yourself, to a writable directory, for example: 1 export HOME = /tmp/home","title":"Use PDM in Continuous Integration"},{"location":"usage/advanced/#use-other-pep-517-backends","text":"PDM supports ALL PEP 517 build backends that comply with PEP 621 specification. At the time of writing, flit is going to switch to PEP 621 metadata in the near future, then you can keep flit as the build-backend while still managing dependencies using PDM: 1 2 3 [build-system] requires = [ \"flit_core >=2,<4\" ] build-backend = \"flit_core.buildapi\" PDM will call the correct backend when pdm build .","title":"Use other PEP 517 backends"},{"location":"usage/advanced/#use-pdm-in-a-multi-stage-dockerfile","text":"It is possible to use PDM in a multi-stage Dockerfile to first install the project and dependencies into __pypackages__ and then copy this folder into the final stage, adding it to PYTHONPATH . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # build stage FROM python:3.8 AS builder # install PDM RUN pip install -U pip setuptools wheel RUN pip install pdm # copy files COPY pyproject.toml pdm.lock README.md /project/ COPY src/ /project/src # install dependencies and project WORKDIR /project RUN pdm install --prod --no-lock --no-editable # run stage FROM python:3.8 # retrieve packages from build stage ENV PYTHONPATH = /project/pkgs COPY --from = builder /project/__pypackages__/3.8/lib /project/pkgs # set command/entrypoint, adapt to fit your needs CMD [ \"python\" , \"-m\" , \"project\" ]","title":"Use PDM in a multi-stage Dockerfile"},{"location":"usage/advanced/#integrate-with-other-ide-or-editors","text":"","title":"Integrate with other IDE or editors"},{"location":"usage/advanced/#work-with-lsp-python-ms-in-emacs","text":"Below is a sample code snippet showing how to make PDM work with lsp-python-ms in Emacs. Contributed by @linw1995 . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 ;; TODO: Cache result ( defun linw1995/pdm-get-python-executable ( &optional dir ) ( let (( pdm-get-python-cmd \"pdm info --python\" )) ( string-trim ( shell-command-to-string ( if dir ( concat \"cd \" dir \" && \" pdm-get-python-cmd ) pdm-get-python-cmd ))))) ( defun linw1995/pdm-get-packages-path ( &optional dir ) ( let (( pdm-get-packages-cmd \"pdm info --packages\" )) ( concat ( string-trim ( shell-command-to-string ( if dir ( concat \"cd \" dir \" && \" pdm-get-packages-cmd ) pdm-get-packages-cmd ))) \"/lib\" ))) ( use-package lsp-python-ms :ensure t :init ( setq lsp-python-ms-auto-install-server t ) :hook ( python-mode . ( lambda () ( setq lsp-python-ms-python-executable ( linw1995/pdm-get-python-executable )) ( setq lsp-python-ms-extra-paths ( vector ( linw1995/pdm-get-packages-path ))) ( require 'lsp-python-ms ) ( lsp )))) ; or lsp-deferred","title":"Work with lsp-python-ms in Emacs"},{"location":"usage/dependency/","text":"Manage Dependencies # PDM provides a bunch of handful commands to help manage your project and dependencies. The following examples are run on Ubuntu 18.04, a few changes must be done if you are using Windows. Initialize a project # 1 2 mkdir pdm-test && cd pdm-test pdm init Answer several questions asked by PDM and a pyproject.toml will be created for you in the project root: 1 2 3 4 5 6 7 8 9 10 11 [project] name = \"pdm-test\" version = \"0.0.0\" description = \"\" authors = [ { name = \"Frost Ming\" , email = \"mianghong@gmail.com\" } ] license = { text = \"MIT\" } requires-python = \">=3.7\" dependencies = [] If pyproject.toml is already present, it will be updated with the metadata. The metadata format follows the PEP 621 specification For details of the meaning of each field in pyproject.toml , please refer to Project File . Add dependencies # 1 pdm add requests pdm add can be followed by one or several dependencies, and the dependency specification is described in PEP 508 . PDM also allows extra dependency groups by providing -G/--group <name> option, and those dependencies will go to [project.optional-dependencies.<name>] table in the project file, respectively. After that, dependencies and sub-dependencies will be resolved properly and installed for you, you can view pdm.lock to see the resolved result of all dependencies. Add local dependencies # Local packages can be added with their paths. The path can be a file or a directory: 1 2 pdm add ./sub-package pdm add ./first-1.0.0-py2.py3-none-any.whl The paths MUST start with a . , otherwise it will be recognized as a normal named requirement. In addition, a local directory can also be installed in editable mode (just like pip install -e <local project path> would) using pdm add -e/--editable <local project path> . Add development only dependencies # New in 1.5.0 PDM also supports defining groups of dependencies that are useful for development, e.g. some for testing and others for linting. We usually don't want these dependencies appear in the distribution's metadata so using optional-dependencies is probably not a good idea. We can define them as development dependencies: 1 pdm add -dG test pytest This will result in a pyproject.toml as following: 1 2 [tool.pdm.dev-dependencies] test = [ \"pytest\" ] For backward-compatibility, if only -d or --dev is specified, dependencies will go to dev group under [tool.pdm.dev-dependencies] by default. Note The same group name MUST NOT appear in both [tool.pdm.dev-dependencies] and [project.optional-dependencies] . Save version specifiers # If the package is given without a version specifier like pdm add requests . PDM provides three different behaviors of what version specifier is saved for the dependency, which is given by --save-<strategy> (Assume 2.21.0 is the latest version that can be found for the dependency): minimum : Save the minimum version specifier: >=2.21.0 (default). compatible : Save the compatible version specifier: >=2.21.0,<3.0.0 . exact : Save the exact version specifier: ==2.21.0 . wildcard : Don't constrain version and leave the specifier to be wildcard: * . Add prereleases # One can give --pre/--prerelease option to pdm add so that prereleases are allowed to be pinned for the given packages. Update existing dependencies # To update all dependencies in the lock file: 1 pdm update To update the specified package(s): 1 pdm update requests To update multiple groups of dependencies: 1 pdm update -G security -G http To update a given package in the specified group: 1 pdm update -G security cryptography If the group is not given, PDM will search for the requirement in the default dependencies set and raises an error if none is found. To update packages in development dependencies: 1 2 3 4 # Update all default + dev-dependencies pdm update -d # Update a package in the specified group of dev-dependencies pdm update -dG test pytest About update strategy # Similarly, PDM also provides 2 different behaviors of updating dependencies and sub-dependencies\uff0c which is given by --update-<strategy> option: reuse : Keep all locked dependencies except for those given in the command line (default). eager : Try to lock a newer version of the packages in command line and their recursive sub-dependencies and keep other dependencies as they are. Update packages to the versions that break the version specifiers # One can give -u/--unconstrained to tell PDM to ignore the version specifiers in the pyproject.toml . This works similarly to the yarn upgrade -L/--latest command. Besides, pdm update also supports the --pre/--prerelease option. Remove existing dependencies # To remove existing dependencies from project file and the library directory: 1 2 3 4 5 6 # Remove requests from the default dependencies pdm remove requests # Remove h11 from the 'web' group of optional-dependencies pdm remove -G web h11 # Remove pytest-cov from the ` test ` group of dev-dependencies pdm remove -dG test pytest-cov Install the packages pinned in lock file # There are two similar commands to do this job with a slight difference: pdm install will check the lock file and relock if it mismatches with project file, then install. pdm sync installs dependencies in the lock file and will error out if it doesn't exist. Besides, pdm sync can also remove unneeded packages if --clean option is given. Specify the lockfile to use # You can specify another lockfile than the default pdm.lock by using the -L/--lockfilie <filepath> option or the PDM_LOCKFILE environment variable. Select a subset of dependencies with CLI options # Say we have a project with following dependencies: 1 2 3 4 5 6 7 8 9 10 [ project ] # This is production dependencies dependencies = [ \"requests\" ] [ project . optional-dependencies ] # This is optional dependencies extra1 = [ \"flask\" ] extra2 = [ \"django\" ] [ tool . pdm . dev-dependencies ] # This is dev dependencies dev1 = [ \"pytest\" ] dev2 = [ \"mkdocs\" ] Command What it does Comments pdm install install prod and dev deps (no optional) pdm install -G extra1 install prod deps, dev deps, and \"extra1\" optional group pdm install -G dev1 install prod deps and only \"dev1\" dev group pdm install -G:all install prod deps, dev deps and \"extra1\", \"extra2\" optional groups pdm install -G extra1 -G dev1 install prod deps, \"extra1\" optional group and only \"dev1\" dev group pdm install --prod install prod only pdm install --prod -G extra1 install prod deps and \"extra1\" optional pdm install --prod -G dev1 Fail, --prod can't be given with dev dependencies Leave the --prod option All development dependencies are included as long as --prod is not passed and -G doesn't specify any dev groups. Besides, if you don't want the root project to be installed, add --no-self option, and --no-editable can be used when you want all packages to be installed in non-editable versions. With --no-editable turn on, you can safely archive the whole __pypackages__ and copy it to the target environment for deployment. Show what packages are installed # Similar to pip list , you can list all packages installed in the packages directory: 1 pdm list Or show a dependency graph by: 1 2 3 4 5 6 7 8 9 10 11 12 $ pdm list --graph tempenv 0.0.0 \u2514\u2500\u2500 click 7.0 [ required: <7.0.0,>=6.7 ] black 19.10b0 \u251c\u2500\u2500 appdirs 1.4.3 [ required: Any ] \u251c\u2500\u2500 attrs 19.3.0 [ required: >=18.1.0 ] \u251c\u2500\u2500 click 7.0 [ required: >=6.5 ] \u251c\u2500\u2500 pathspec 0.7.0 [ required: <1,>=0.6 ] \u251c\u2500\u2500 regex 2020.2.20 [ required: Any ] \u251c\u2500\u2500 toml 0.10.0 [ required: >=0.9.4 ] \u2514\u2500\u2500 typed-ast 1.4.1 [ required: >=1.4.0 ] bump2version 1.0.0 Set PyPI index URL # You can specify a PyPI mirror URL by following commands: 1 pdm config pypi.url https://test.pypi.org/simple By default, PDM will read the pip's configuration files to decide the PyPI URL, and fallback to https://pypi.org/simple if none is found. Allow prerelease versions to be installed # Include the following setting in pyproject.toml to enable: 1 2 [tool.pdm] allow_prereleases = true Solve the locking failure # If PDM is not able to find a resolution to satisfy the requirements, it will raise an error. For example, 1 2 3 4 5 6 7 pdm django == 3 .1.4 \"asgiref<3\" ... \ud83d\udd12 Lock failed Unable to find a resolution for asgiref because of the following conflicts: asgiref< 3 ( from project ) asgiref< 4 ,> = 3 .2.10 ( from <Candidate django 3 .1.4 from https://pypi.org/simple/django/> ) To fix this, you could loosen the dependency version constraints in pyproject.toml. If that is not possible, you could also override the resolved version in [ tool.pdm.overrides ] table. You can either change to a lower version of django or remove the upper bound of asgiref . But if it is not eligible for your project, you can tell PDM to forcedly resolve asgiref to a specific version by adding the following lines to pyproject.toml : New in version 1.12.0 1 2 3 4 [tool.pdm.overrides] asgiref = \"3.2.10\" # exact version urllib3 = \">=1.26.2\" # version range pytz = \"file:///${PROJECT_ROOT}/pytz-2020.9-py3-none-any.whl\" # absolute URL Each entry of that table is a package name with the wanted version. In this example, PDM will resolve the above packages into the given versions no matter whether there is any other resolution available. Note By using [tool.pdm.overrides] setting, you are at your own risk of any incompatibilities from that resolution. It can only be used if there is no valid resolution for your requirements and you know the specific version works. Most of the time, you can just add any transient constraints to the dependencies array. Environment variables expansion # For convenience, PDM supports environment variables expansion in the dependency specification under some circumstances: Environment variables in the URL auth part will be expanded: https://${USERNAME}:${PASSWORD}/artifacts.io/Flask-1.1.2.tar.gz . It is also okay to not give the auth part in the URL directly, PDM will ask for them when -v/--verbose is on. ${PROJECT_ROOT} will be expanded with the absolute path of the project root, in POSIX style(i.e. forward slash / , even on Windows). For consistency, URLs that refer to a local path under ${PROJECT_ROOT} must start with file:/// (three slashes), e.g. file:///${PROJECT_ROOT}/artifacts/Flask-1.1.2.tar.gz . Don't worry about credential leakage, the environment variables will be expanded when needed and kept untouched in the lock file.","title":"Manage Dependencies"},{"location":"usage/dependency/#manage-dependencies","text":"PDM provides a bunch of handful commands to help manage your project and dependencies. The following examples are run on Ubuntu 18.04, a few changes must be done if you are using Windows.","title":"Manage Dependencies"},{"location":"usage/dependency/#initialize-a-project","text":"1 2 mkdir pdm-test && cd pdm-test pdm init Answer several questions asked by PDM and a pyproject.toml will be created for you in the project root: 1 2 3 4 5 6 7 8 9 10 11 [project] name = \"pdm-test\" version = \"0.0.0\" description = \"\" authors = [ { name = \"Frost Ming\" , email = \"mianghong@gmail.com\" } ] license = { text = \"MIT\" } requires-python = \">=3.7\" dependencies = [] If pyproject.toml is already present, it will be updated with the metadata. The metadata format follows the PEP 621 specification For details of the meaning of each field in pyproject.toml , please refer to Project File .","title":"Initialize a project"},{"location":"usage/dependency/#add-dependencies","text":"1 pdm add requests pdm add can be followed by one or several dependencies, and the dependency specification is described in PEP 508 . PDM also allows extra dependency groups by providing -G/--group <name> option, and those dependencies will go to [project.optional-dependencies.<name>] table in the project file, respectively. After that, dependencies and sub-dependencies will be resolved properly and installed for you, you can view pdm.lock to see the resolved result of all dependencies.","title":"Add dependencies"},{"location":"usage/dependency/#add-local-dependencies","text":"Local packages can be added with their paths. The path can be a file or a directory: 1 2 pdm add ./sub-package pdm add ./first-1.0.0-py2.py3-none-any.whl The paths MUST start with a . , otherwise it will be recognized as a normal named requirement. In addition, a local directory can also be installed in editable mode (just like pip install -e <local project path> would) using pdm add -e/--editable <local project path> .","title":"Add local dependencies"},{"location":"usage/dependency/#add-development-only-dependencies","text":"New in 1.5.0 PDM also supports defining groups of dependencies that are useful for development, e.g. some for testing and others for linting. We usually don't want these dependencies appear in the distribution's metadata so using optional-dependencies is probably not a good idea. We can define them as development dependencies: 1 pdm add -dG test pytest This will result in a pyproject.toml as following: 1 2 [tool.pdm.dev-dependencies] test = [ \"pytest\" ] For backward-compatibility, if only -d or --dev is specified, dependencies will go to dev group under [tool.pdm.dev-dependencies] by default. Note The same group name MUST NOT appear in both [tool.pdm.dev-dependencies] and [project.optional-dependencies] .","title":"Add development only dependencies"},{"location":"usage/dependency/#save-version-specifiers","text":"If the package is given without a version specifier like pdm add requests . PDM provides three different behaviors of what version specifier is saved for the dependency, which is given by --save-<strategy> (Assume 2.21.0 is the latest version that can be found for the dependency): minimum : Save the minimum version specifier: >=2.21.0 (default). compatible : Save the compatible version specifier: >=2.21.0,<3.0.0 . exact : Save the exact version specifier: ==2.21.0 . wildcard : Don't constrain version and leave the specifier to be wildcard: * .","title":"Save version specifiers"},{"location":"usage/dependency/#add-prereleases","text":"One can give --pre/--prerelease option to pdm add so that prereleases are allowed to be pinned for the given packages.","title":"Add prereleases"},{"location":"usage/dependency/#update-existing-dependencies","text":"To update all dependencies in the lock file: 1 pdm update To update the specified package(s): 1 pdm update requests To update multiple groups of dependencies: 1 pdm update -G security -G http To update a given package in the specified group: 1 pdm update -G security cryptography If the group is not given, PDM will search for the requirement in the default dependencies set and raises an error if none is found. To update packages in development dependencies: 1 2 3 4 # Update all default + dev-dependencies pdm update -d # Update a package in the specified group of dev-dependencies pdm update -dG test pytest","title":"Update existing dependencies"},{"location":"usage/dependency/#about-update-strategy","text":"Similarly, PDM also provides 2 different behaviors of updating dependencies and sub-dependencies\uff0c which is given by --update-<strategy> option: reuse : Keep all locked dependencies except for those given in the command line (default). eager : Try to lock a newer version of the packages in command line and their recursive sub-dependencies and keep other dependencies as they are.","title":"About update strategy"},{"location":"usage/dependency/#update-packages-to-the-versions-that-break-the-version-specifiers","text":"One can give -u/--unconstrained to tell PDM to ignore the version specifiers in the pyproject.toml . This works similarly to the yarn upgrade -L/--latest command. Besides, pdm update also supports the --pre/--prerelease option.","title":"Update packages to the versions that break the version specifiers"},{"location":"usage/dependency/#remove-existing-dependencies","text":"To remove existing dependencies from project file and the library directory: 1 2 3 4 5 6 # Remove requests from the default dependencies pdm remove requests # Remove h11 from the 'web' group of optional-dependencies pdm remove -G web h11 # Remove pytest-cov from the ` test ` group of dev-dependencies pdm remove -dG test pytest-cov","title":"Remove existing dependencies"},{"location":"usage/dependency/#install-the-packages-pinned-in-lock-file","text":"There are two similar commands to do this job with a slight difference: pdm install will check the lock file and relock if it mismatches with project file, then install. pdm sync installs dependencies in the lock file and will error out if it doesn't exist. Besides, pdm sync can also remove unneeded packages if --clean option is given.","title":"Install the packages pinned in lock file"},{"location":"usage/dependency/#specify-the-lockfile-to-use","text":"You can specify another lockfile than the default pdm.lock by using the -L/--lockfilie <filepath> option or the PDM_LOCKFILE environment variable.","title":"Specify the lockfile to use"},{"location":"usage/dependency/#select-a-subset-of-dependencies-with-cli-options","text":"Say we have a project with following dependencies: 1 2 3 4 5 6 7 8 9 10 [ project ] # This is production dependencies dependencies = [ \"requests\" ] [ project . optional-dependencies ] # This is optional dependencies extra1 = [ \"flask\" ] extra2 = [ \"django\" ] [ tool . pdm . dev-dependencies ] # This is dev dependencies dev1 = [ \"pytest\" ] dev2 = [ \"mkdocs\" ] Command What it does Comments pdm install install prod and dev deps (no optional) pdm install -G extra1 install prod deps, dev deps, and \"extra1\" optional group pdm install -G dev1 install prod deps and only \"dev1\" dev group pdm install -G:all install prod deps, dev deps and \"extra1\", \"extra2\" optional groups pdm install -G extra1 -G dev1 install prod deps, \"extra1\" optional group and only \"dev1\" dev group pdm install --prod install prod only pdm install --prod -G extra1 install prod deps and \"extra1\" optional pdm install --prod -G dev1 Fail, --prod can't be given with dev dependencies Leave the --prod option All development dependencies are included as long as --prod is not passed and -G doesn't specify any dev groups. Besides, if you don't want the root project to be installed, add --no-self option, and --no-editable can be used when you want all packages to be installed in non-editable versions. With --no-editable turn on, you can safely archive the whole __pypackages__ and copy it to the target environment for deployment.","title":"Select a subset of dependencies with CLI options"},{"location":"usage/dependency/#show-what-packages-are-installed","text":"Similar to pip list , you can list all packages installed in the packages directory: 1 pdm list Or show a dependency graph by: 1 2 3 4 5 6 7 8 9 10 11 12 $ pdm list --graph tempenv 0.0.0 \u2514\u2500\u2500 click 7.0 [ required: <7.0.0,>=6.7 ] black 19.10b0 \u251c\u2500\u2500 appdirs 1.4.3 [ required: Any ] \u251c\u2500\u2500 attrs 19.3.0 [ required: >=18.1.0 ] \u251c\u2500\u2500 click 7.0 [ required: >=6.5 ] \u251c\u2500\u2500 pathspec 0.7.0 [ required: <1,>=0.6 ] \u251c\u2500\u2500 regex 2020.2.20 [ required: Any ] \u251c\u2500\u2500 toml 0.10.0 [ required: >=0.9.4 ] \u2514\u2500\u2500 typed-ast 1.4.1 [ required: >=1.4.0 ] bump2version 1.0.0","title":"Show what packages are installed"},{"location":"usage/dependency/#set-pypi-index-url","text":"You can specify a PyPI mirror URL by following commands: 1 pdm config pypi.url https://test.pypi.org/simple By default, PDM will read the pip's configuration files to decide the PyPI URL, and fallback to https://pypi.org/simple if none is found.","title":"Set PyPI index URL"},{"location":"usage/dependency/#allow-prerelease-versions-to-be-installed","text":"Include the following setting in pyproject.toml to enable: 1 2 [tool.pdm] allow_prereleases = true","title":"Allow prerelease versions to be installed"},{"location":"usage/dependency/#solve-the-locking-failure","text":"If PDM is not able to find a resolution to satisfy the requirements, it will raise an error. For example, 1 2 3 4 5 6 7 pdm django == 3 .1.4 \"asgiref<3\" ... \ud83d\udd12 Lock failed Unable to find a resolution for asgiref because of the following conflicts: asgiref< 3 ( from project ) asgiref< 4 ,> = 3 .2.10 ( from <Candidate django 3 .1.4 from https://pypi.org/simple/django/> ) To fix this, you could loosen the dependency version constraints in pyproject.toml. If that is not possible, you could also override the resolved version in [ tool.pdm.overrides ] table. You can either change to a lower version of django or remove the upper bound of asgiref . But if it is not eligible for your project, you can tell PDM to forcedly resolve asgiref to a specific version by adding the following lines to pyproject.toml : New in version 1.12.0 1 2 3 4 [tool.pdm.overrides] asgiref = \"3.2.10\" # exact version urllib3 = \">=1.26.2\" # version range pytz = \"file:///${PROJECT_ROOT}/pytz-2020.9-py3-none-any.whl\" # absolute URL Each entry of that table is a package name with the wanted version. In this example, PDM will resolve the above packages into the given versions no matter whether there is any other resolution available. Note By using [tool.pdm.overrides] setting, you are at your own risk of any incompatibilities from that resolution. It can only be used if there is no valid resolution for your requirements and you know the specific version works. Most of the time, you can just add any transient constraints to the dependencies array.","title":"Solve the locking failure"},{"location":"usage/dependency/#environment-variables-expansion","text":"For convenience, PDM supports environment variables expansion in the dependency specification under some circumstances: Environment variables in the URL auth part will be expanded: https://${USERNAME}:${PASSWORD}/artifacts.io/Flask-1.1.2.tar.gz . It is also okay to not give the auth part in the URL directly, PDM will ask for them when -v/--verbose is on. ${PROJECT_ROOT} will be expanded with the absolute path of the project root, in POSIX style(i.e. forward slash / , even on Windows). For consistency, URLs that refer to a local path under ${PROJECT_ROOT} must start with file:/// (three slashes), e.g. file:///${PROJECT_ROOT}/artifacts/Flask-1.1.2.tar.gz . Don't worry about credential leakage, the environment variables will be expanded when needed and kept untouched in the lock file.","title":"Environment variables expansion"},{"location":"usage/project/","text":"Manage Project # PDM can act as a PEP 517 build backend, to enable that, write the following lines in your pyproject.toml . If you used pdm init to create it for you, it should be done already. 1 2 3 [build-system] requires = [ \"pdm-pep517\" ] build-backend = \"pdm.pep517.api\" pip will read the backend settings to install or build a package. Choose a Python interpreter # If you have used pdm init , you must have already seen how PDM detects and selects the Python interpreter. After initialized, you can also change the settings by pdm use <python_version_or_path> . The argument can be either a version specifier of any length, or a relative or absolute path to the python interpreter, but remember the Python interpreter must conform with the python_requires constraint in the project file. How requires-python controls the project # PDM respects the value of requires-python in the way that it tries to pick package candidates that can work on all python versions that requires-python contains. For example, if requires-python is >=2.7 , PDM will try to find the latest version of foo , whose requires-python version range is a superset of >=2.7 . So, make sure you write requires-python properly if you don't want any outdated packages to be locked. Build distribution artifacts # 1 2 3 4 5 $ pdm build - Building sdist... - Built pdm-test-0.0.0.tar.gz - Building wheel... - Built pdm_test-0.0.0-py3-none-any.whl The artifacts can then be uploaded to PyPI by twine or using the pdm-publish plugin. Available options can be found by typing pdm build --help . Looking for publish support? If you are looking for publish subcommand as poetry, you can refer to the pdm-publish plugin. Indeed, most of the time, publishing should be handled by CI/CD pipelines. Show the current Python environment # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $ pdm info Python Interpreter: D:/Programs/Python/Python38/python.exe (3.8.0) Project Root: D:/Workspace/pdm [10:42] $ pdm info --env { \"implementation_name\": \"cpython\", \"implementation_version\": \"3.8.0\", \"os_name\": \"nt\", \"platform_machine\": \"AMD64\", \"platform_release\": \"10\", \"platform_system\": \"Windows\", \"platform_version\": \"10.0.18362\", \"python_full_version\": \"3.8.0\", \"platform_python_implementaiton\": \"CPython\", \"python_version\": \"3.8\", \"sys_platform\": \"win32\" } Configure the project # PDM's config command works just like git config , except that --list isn't needed to show configurations. Show the current configurations: 1 pdm config Get one single configuration: 1 pdm config pypi.url Change a configuration value and store in home configuration: 1 pdm config pypi.url \"https://test.pypi.org/simple\" By default, the configuration are changed globally, if you want to make the config seen by this project only, add a --local flag: 1 pdm config --local pypi.url \"https://test.pypi.org/simple\" Any local configurations will be stored in .pdm.toml under the project root directory. The configuration files are searched in the following order: <PROJECT_ROOT>/.pdm.toml - The project configuration ~/.pdm/config.toml - The home configuration If -g/--global option is used, the first item will be replaced by ~/.pdm/global-project/.pdm.toml . You can find all available configuration items in Configuration Page . Cache the installation of wheels # If a package is required by many projects on the system, each project has to keep its own copy. This may become a waste of disk space especially for data science and machine learning libraries. PDM supports caching the installations of the same wheel by installing it into a centralized package repository and linking to that installation in different projects. To enabled it, run: 1 pdm config install.cache on It can be enabled on a project basis, by adding --local option to the command. The caches are located under $(pdm config cache_dir)/packages . One can view the cache usage by pdm cache info . But be noted the cached installations are managed automatically -- They get deleted when not linked from any projects. Manually deleting the caches from the disk may break some projects on the system. Note Only the installation of named requirements resolved from PyPI can be cached. Manage global project # Sometimes users may want to keep track of the dependencies of global Python interpreter as well. It is easy to do so with PDM, via -g/--global option which is supported by most subcommands. If the option is passed, ~/.pdm/global-project will be used as the project directory, which is almost the same as normal project except that pyproject.toml will be created automatically for you and it doesn't support build features. The idea is taken from Haskell's stack . However, unlike stack , by default, PDM won't use global project automatically if a local project is not found. Users should pass -g/--global explicitly to activate it, since it is not very pleasing if packages go to a wrong place. But PDM also leave the decision to users, just set the config global_project.fallback to true . If you want global project to track another project file other than ~/.pdm/global-project , you can provide the project path via -p/--project <path> option. CAUTION Be careful with remove and sync --clean commands when global project is used, because it may remove packages installed in your system Python. Working with a virtualenv # Although PDM enforces PEP 582 by default, it also allows users to install packages into the virtualenv. It is controlled by the configuration item python.use_venv . When it is set to True , PDM will use the virtualenv if: a virtualenv is already activated. any of venv , .venv , env is a valid virtualenv folder. Besides, when python.use_venv is on and the interpreter path given is a venv-like path, PDM will reuse that venv directory as well. For enhanced virtualenv support such as virtualenv management and auto-creation, please go for pdm-venv , which can be installed as a plugin. Import project metadata from existing project files # If you are already other package manager tools like Pipenv or Poetry, it is easy to migrate to PDM. PDM provides import command so that you don't have to initialize the project manually, it now supports: Pipenv's Pipfile Poetry's section in pyproject.toml Flit's section in pyproject.toml requirements.txt format used by Pip Also, when you are executing pdm init or pdm install , PDM can auto-detect possible files to import if your PDM project has not been initialized yet. Export locked packages to alternative formats # You can also export pdm.lock to other formats, to ease the CI flow or image building process. Currently, only requirements.txt and setup.py format is supported: 1 2 pdm export -o requirements.txt pdm export -f setuppy -o setup.py Hide the credentials from pyproject.toml # There are many times when we need to use sensitive information, such as login credentials for the PyPI server and username passwords for VCS repositories. We do not want to expose this information in pyproject.toml and upload it to git. PDM provides several methods to achieve this: User can give the auth information with environment variables which are encoded in the URL directly: 1 2 3 4 5 6 7 8 9 [[tool.pdm.source]] url = \"http://${INDEX_USER}:${INDEX_PASSWD}@test.pypi.org/simple\" name = \"test\" verify_ssl = false [project] dependencies = [ \"mypackage @ git+http://${VCS_USER}:${VCS_PASSWD}@test.git.com/test/mypackage.git@master\" ] Environment variables must be encoded in the form ${ENV_NAME} , other forms are not supported. Besides, only auth part will be expanded. If the credentials are not provided in the URL and a 401 response is received from the server, PDM will prompt for username and password when -v/--verbose is passed as command line argument, otherwise PDM will fail with an error telling users what happens. Users can then choose to store the credentials in the keyring after a confirmation question. A VCS repository applies the first method only, and an index server applies both methods. Manage caches # PDM provides a convenient command group to manage the cache, there are four kinds of caches: wheels/ stores the built results of non-wheel distributions and files. http/ stores the HTTP response content. metadata/ stores package metadata retrieved by the resolver. hashes/ stores the file hashes fetched from the package index or calculated locally. packages/ The centrialized repository for installed wheels. See the current cache usage by typing pdm cache info . Besides, you can use add , remove and list subcommands to manage the cache content. Find the usage by the --help option of each command. How we make PEP 582 packages available to the Python interpreter # Thanks to the site packages loading on Python startup. It is possible to patch the sys.path by executing the sitecustomize.py shipped with PDM. The interpreter can search the directories for the nearest __pypackage__ folder and append it to the sys.path variable.","title":"Manage Project"},{"location":"usage/project/#manage-project","text":"PDM can act as a PEP 517 build backend, to enable that, write the following lines in your pyproject.toml . If you used pdm init to create it for you, it should be done already. 1 2 3 [build-system] requires = [ \"pdm-pep517\" ] build-backend = \"pdm.pep517.api\" pip will read the backend settings to install or build a package.","title":"Manage Project"},{"location":"usage/project/#choose-a-python-interpreter","text":"If you have used pdm init , you must have already seen how PDM detects and selects the Python interpreter. After initialized, you can also change the settings by pdm use <python_version_or_path> . The argument can be either a version specifier of any length, or a relative or absolute path to the python interpreter, but remember the Python interpreter must conform with the python_requires constraint in the project file.","title":"Choose a Python interpreter"},{"location":"usage/project/#how-requires-python-controls-the-project","text":"PDM respects the value of requires-python in the way that it tries to pick package candidates that can work on all python versions that requires-python contains. For example, if requires-python is >=2.7 , PDM will try to find the latest version of foo , whose requires-python version range is a superset of >=2.7 . So, make sure you write requires-python properly if you don't want any outdated packages to be locked.","title":"How requires-python controls the project"},{"location":"usage/project/#build-distribution-artifacts","text":"1 2 3 4 5 $ pdm build - Building sdist... - Built pdm-test-0.0.0.tar.gz - Building wheel... - Built pdm_test-0.0.0-py3-none-any.whl The artifacts can then be uploaded to PyPI by twine or using the pdm-publish plugin. Available options can be found by typing pdm build --help . Looking for publish support? If you are looking for publish subcommand as poetry, you can refer to the pdm-publish plugin. Indeed, most of the time, publishing should be handled by CI/CD pipelines.","title":"Build distribution artifacts"},{"location":"usage/project/#show-the-current-python-environment","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $ pdm info Python Interpreter: D:/Programs/Python/Python38/python.exe (3.8.0) Project Root: D:/Workspace/pdm [10:42] $ pdm info --env { \"implementation_name\": \"cpython\", \"implementation_version\": \"3.8.0\", \"os_name\": \"nt\", \"platform_machine\": \"AMD64\", \"platform_release\": \"10\", \"platform_system\": \"Windows\", \"platform_version\": \"10.0.18362\", \"python_full_version\": \"3.8.0\", \"platform_python_implementaiton\": \"CPython\", \"python_version\": \"3.8\", \"sys_platform\": \"win32\" }","title":"Show the current Python environment"},{"location":"usage/project/#configure-the-project","text":"PDM's config command works just like git config , except that --list isn't needed to show configurations. Show the current configurations: 1 pdm config Get one single configuration: 1 pdm config pypi.url Change a configuration value and store in home configuration: 1 pdm config pypi.url \"https://test.pypi.org/simple\" By default, the configuration are changed globally, if you want to make the config seen by this project only, add a --local flag: 1 pdm config --local pypi.url \"https://test.pypi.org/simple\" Any local configurations will be stored in .pdm.toml under the project root directory. The configuration files are searched in the following order: <PROJECT_ROOT>/.pdm.toml - The project configuration ~/.pdm/config.toml - The home configuration If -g/--global option is used, the first item will be replaced by ~/.pdm/global-project/.pdm.toml . You can find all available configuration items in Configuration Page .","title":"Configure the project"},{"location":"usage/project/#cache-the-installation-of-wheels","text":"If a package is required by many projects on the system, each project has to keep its own copy. This may become a waste of disk space especially for data science and machine learning libraries. PDM supports caching the installations of the same wheel by installing it into a centralized package repository and linking to that installation in different projects. To enabled it, run: 1 pdm config install.cache on It can be enabled on a project basis, by adding --local option to the command. The caches are located under $(pdm config cache_dir)/packages . One can view the cache usage by pdm cache info . But be noted the cached installations are managed automatically -- They get deleted when not linked from any projects. Manually deleting the caches from the disk may break some projects on the system. Note Only the installation of named requirements resolved from PyPI can be cached.","title":"Cache the installation of wheels"},{"location":"usage/project/#manage-global-project","text":"Sometimes users may want to keep track of the dependencies of global Python interpreter as well. It is easy to do so with PDM, via -g/--global option which is supported by most subcommands. If the option is passed, ~/.pdm/global-project will be used as the project directory, which is almost the same as normal project except that pyproject.toml will be created automatically for you and it doesn't support build features. The idea is taken from Haskell's stack . However, unlike stack , by default, PDM won't use global project automatically if a local project is not found. Users should pass -g/--global explicitly to activate it, since it is not very pleasing if packages go to a wrong place. But PDM also leave the decision to users, just set the config global_project.fallback to true . If you want global project to track another project file other than ~/.pdm/global-project , you can provide the project path via -p/--project <path> option. CAUTION Be careful with remove and sync --clean commands when global project is used, because it may remove packages installed in your system Python.","title":"Manage global project"},{"location":"usage/project/#working-with-a-virtualenv","text":"Although PDM enforces PEP 582 by default, it also allows users to install packages into the virtualenv. It is controlled by the configuration item python.use_venv . When it is set to True , PDM will use the virtualenv if: a virtualenv is already activated. any of venv , .venv , env is a valid virtualenv folder. Besides, when python.use_venv is on and the interpreter path given is a venv-like path, PDM will reuse that venv directory as well. For enhanced virtualenv support such as virtualenv management and auto-creation, please go for pdm-venv , which can be installed as a plugin.","title":"Working with a virtualenv"},{"location":"usage/project/#import-project-metadata-from-existing-project-files","text":"If you are already other package manager tools like Pipenv or Poetry, it is easy to migrate to PDM. PDM provides import command so that you don't have to initialize the project manually, it now supports: Pipenv's Pipfile Poetry's section in pyproject.toml Flit's section in pyproject.toml requirements.txt format used by Pip Also, when you are executing pdm init or pdm install , PDM can auto-detect possible files to import if your PDM project has not been initialized yet.","title":"Import project metadata from existing project files"},{"location":"usage/project/#export-locked-packages-to-alternative-formats","text":"You can also export pdm.lock to other formats, to ease the CI flow or image building process. Currently, only requirements.txt and setup.py format is supported: 1 2 pdm export -o requirements.txt pdm export -f setuppy -o setup.py","title":"Export locked packages to alternative formats"},{"location":"usage/project/#hide-the-credentials-from-pyprojecttoml","text":"There are many times when we need to use sensitive information, such as login credentials for the PyPI server and username passwords for VCS repositories. We do not want to expose this information in pyproject.toml and upload it to git. PDM provides several methods to achieve this: User can give the auth information with environment variables which are encoded in the URL directly: 1 2 3 4 5 6 7 8 9 [[tool.pdm.source]] url = \"http://${INDEX_USER}:${INDEX_PASSWD}@test.pypi.org/simple\" name = \"test\" verify_ssl = false [project] dependencies = [ \"mypackage @ git+http://${VCS_USER}:${VCS_PASSWD}@test.git.com/test/mypackage.git@master\" ] Environment variables must be encoded in the form ${ENV_NAME} , other forms are not supported. Besides, only auth part will be expanded. If the credentials are not provided in the URL and a 401 response is received from the server, PDM will prompt for username and password when -v/--verbose is passed as command line argument, otherwise PDM will fail with an error telling users what happens. Users can then choose to store the credentials in the keyring after a confirmation question. A VCS repository applies the first method only, and an index server applies both methods.","title":"Hide the credentials from pyproject.toml"},{"location":"usage/project/#manage-caches","text":"PDM provides a convenient command group to manage the cache, there are four kinds of caches: wheels/ stores the built results of non-wheel distributions and files. http/ stores the HTTP response content. metadata/ stores package metadata retrieved by the resolver. hashes/ stores the file hashes fetched from the package index or calculated locally. packages/ The centrialized repository for installed wheels. See the current cache usage by typing pdm cache info . Besides, you can use add , remove and list subcommands to manage the cache content. Find the usage by the --help option of each command.","title":"Manage caches"},{"location":"usage/project/#how-we-make-pep-582-packages-available-to-the-python-interpreter","text":"Thanks to the site packages loading on Python startup. It is possible to patch the sys.path by executing the sitecustomize.py shipped with PDM. The interpreter can search the directories for the nearest __pypackage__ folder and append it to the sys.path variable.","title":"How we make PEP 582 packages available to the Python interpreter"},{"location":"usage/scripts/","text":"PDM Scripts # Like npm run , with PDM, you can run arbitrary scripts or commands with local packages loaded. Arbitrary Scripts # 1 pdm run flask run -p 54321 It will run flask run -p 54321 in the environment that is aware of packages in __pypackages__/ folder. [tool.pdm.scripts] Table # PDM also supports custom script shortcuts in the optional [tool.pdm.scripts] section of pyproject.toml . You can then run pdm run <script_name> to invoke the script in the context of your PDM project. For example: 1 2 [tool.pdm.scripts] start = \"flask run -p 54321\" And then in your terminal: 1 2 $ pdm run start Flask server started at http://127.0.0.1:54321 Any extra arguments will be appended to the command: 1 2 $ pdm run start -h 0 .0.0.0 Flask server started at http://0.0.0.0:54321 PDM supports 3 types of scripts: cmd # Plain text scripts are regarded as normal command, or you can explicitly specify it: 1 2 [tool.pdm.scripts] start = { cmd = \"flask run -p 54321\" } In some cases, such as when wanting to add comments between parameters, it might be more convenient to specify the command as an array instead of a string: 1 2 3 4 5 6 7 [tool.pdm.scripts] start = { cmd = [ \"flask\" , \"run\" , # Important comment here about always using port 54321 \"-p\" , \"54321\" ]} shell # Shell scripts can be used to run more shell-specific tasks, such as pipeline and output redirecting. This is basically run via subprocess.Popen() with shell=True : 1 2 [tool.pdm.scripts] filter_error = { shell = \"cat error.log|grep CRITICAL > critical.log\" } call # The script can be also defined as calling a python function in the form <module_name>:<func_name> : 1 2 [tool.pdm.scripts] foobar = { call = \"foo_package.bar_module:main\" } The function can be supplied with literal arguments: 1 2 [tool.pdm.scripts] foobar = { call = \"foo_package.bar_module:main('dev')\" } env # All environment variables set in the current shell can be seen by pdm run and will be expanded when executed. Besides, you can also define some fixed environment variables in your pyproject.toml : 1 2 3 [tool.pdm.scripts] start . cmd = \"flask run -p 54321\" start . env = { FOO = \"bar\" , FLASK_ENV = \"development\" } Note how we use TOML's syntax to define a composite dictionary. env_file # You can also store all environment variables in a dotenv file and let PDM read it: 1 2 3 [tool.pdm.scripts] start . cmd = \"flask run -p 54321\" start . env_file = \".env\" site_packages # To make sure the running environment is properly isolated from the outer Python interpreter, site-packages from the selected interpreter WON'T be loaded into sys.path , unless any of the following conditions holds: The executable is from PATH but not inside the __pypackages__ folder. -s/--site-packages flag is following pdm run . site_packages = true is in either the script table or the global setting key _ . Note that site-packages will always be loaded if running with PEP 582 enabled(without the pdm run prefix). Shared Settings # If you want the settings to be shared by all tasks run by pdm run , you can write them under a special key _ in [tool.pdm.scripts] table: 1 2 3 4 [tool.pdm.scripts] _ . env_file = \".env\" start = \"flask run -p 54321\" migrate_db = \"flask db upgrade\" Besides, inside the tasks, PDM_PROJECT_ROOT environment variable will be set to the project root. Show the List of Scripts # Use pdm run --list/-l to show the list of available script shortcuts: 1 2 3 4 5 6 $ pdm run --list Name Type Script Description ----------- ----- ---------------- ---------------------- test_cmd cmd flask db upgrade test_script call test_script:main call a python function test_shell shell echo $FOO shell command You can add an help option with the description of the script, and it will be displayed in the Description column in the above output. Pre & Post Scripts # Like npm , PDM also supports tasks composition by pre and post scripts, pre script will be run before the given task and post script will be run after. 1 2 3 4 [tool.pdm.scripts] pre_compress = \"{{ Run BEFORE the `compress` script }}\" compress = \"tar czvf compressed.tar.gz data/\" post_compress = \"{{ Run AFTER the `compress` script }}\" In this example, pdm run compress will run all these 3 scripts sequentially. The pipeline fails fast In a pipeline of pre - self - post scripts, a failure will cancel the subsequent execution. Hook Scripts # Under certain situations PDM will look for some special hook scripts for execution: post_init : Run after pdm init pre_install : Run before installing packages post_install : Run after packages are installed pre_lock : Run before dependency resolution post_lock : Run after dependency resolution pre_build : Run before building distributions post_build : Run after distributions are built Note Pre & post scripts can't receive any arguments. Avoid name conflicts If there exists an install scripts under [tool.pdm.scripts] table, pre_install scripts can be triggered by both pdm install and pdm run install . So it is recommended to not use the preserved names.","title":"PDM Scripts"},{"location":"usage/scripts/#pdm-scripts","text":"Like npm run , with PDM, you can run arbitrary scripts or commands with local packages loaded.","title":"PDM Scripts"},{"location":"usage/scripts/#arbitrary-scripts","text":"1 pdm run flask run -p 54321 It will run flask run -p 54321 in the environment that is aware of packages in __pypackages__/ folder.","title":"Arbitrary Scripts"},{"location":"usage/scripts/#toolpdmscripts-table","text":"PDM also supports custom script shortcuts in the optional [tool.pdm.scripts] section of pyproject.toml . You can then run pdm run <script_name> to invoke the script in the context of your PDM project. For example: 1 2 [tool.pdm.scripts] start = \"flask run -p 54321\" And then in your terminal: 1 2 $ pdm run start Flask server started at http://127.0.0.1:54321 Any extra arguments will be appended to the command: 1 2 $ pdm run start -h 0 .0.0.0 Flask server started at http://0.0.0.0:54321 PDM supports 3 types of scripts:","title":"[tool.pdm.scripts] Table"},{"location":"usage/scripts/#cmd","text":"Plain text scripts are regarded as normal command, or you can explicitly specify it: 1 2 [tool.pdm.scripts] start = { cmd = \"flask run -p 54321\" } In some cases, such as when wanting to add comments between parameters, it might be more convenient to specify the command as an array instead of a string: 1 2 3 4 5 6 7 [tool.pdm.scripts] start = { cmd = [ \"flask\" , \"run\" , # Important comment here about always using port 54321 \"-p\" , \"54321\" ]}","title":"cmd"},{"location":"usage/scripts/#shell","text":"Shell scripts can be used to run more shell-specific tasks, such as pipeline and output redirecting. This is basically run via subprocess.Popen() with shell=True : 1 2 [tool.pdm.scripts] filter_error = { shell = \"cat error.log|grep CRITICAL > critical.log\" }","title":"shell"},{"location":"usage/scripts/#call","text":"The script can be also defined as calling a python function in the form <module_name>:<func_name> : 1 2 [tool.pdm.scripts] foobar = { call = \"foo_package.bar_module:main\" } The function can be supplied with literal arguments: 1 2 [tool.pdm.scripts] foobar = { call = \"foo_package.bar_module:main('dev')\" }","title":"call"},{"location":"usage/scripts/#env","text":"All environment variables set in the current shell can be seen by pdm run and will be expanded when executed. Besides, you can also define some fixed environment variables in your pyproject.toml : 1 2 3 [tool.pdm.scripts] start . cmd = \"flask run -p 54321\" start . env = { FOO = \"bar\" , FLASK_ENV = \"development\" } Note how we use TOML's syntax to define a composite dictionary.","title":"env"},{"location":"usage/scripts/#env_file","text":"You can also store all environment variables in a dotenv file and let PDM read it: 1 2 3 [tool.pdm.scripts] start . cmd = \"flask run -p 54321\" start . env_file = \".env\"","title":"env_file"},{"location":"usage/scripts/#site_packages","text":"To make sure the running environment is properly isolated from the outer Python interpreter, site-packages from the selected interpreter WON'T be loaded into sys.path , unless any of the following conditions holds: The executable is from PATH but not inside the __pypackages__ folder. -s/--site-packages flag is following pdm run . site_packages = true is in either the script table or the global setting key _ . Note that site-packages will always be loaded if running with PEP 582 enabled(without the pdm run prefix).","title":"site_packages"},{"location":"usage/scripts/#shared-settings","text":"If you want the settings to be shared by all tasks run by pdm run , you can write them under a special key _ in [tool.pdm.scripts] table: 1 2 3 4 [tool.pdm.scripts] _ . env_file = \".env\" start = \"flask run -p 54321\" migrate_db = \"flask db upgrade\" Besides, inside the tasks, PDM_PROJECT_ROOT environment variable will be set to the project root.","title":"Shared Settings"},{"location":"usage/scripts/#show-the-list-of-scripts","text":"Use pdm run --list/-l to show the list of available script shortcuts: 1 2 3 4 5 6 $ pdm run --list Name Type Script Description ----------- ----- ---------------- ---------------------- test_cmd cmd flask db upgrade test_script call test_script:main call a python function test_shell shell echo $FOO shell command You can add an help option with the description of the script, and it will be displayed in the Description column in the above output.","title":"Show the List of Scripts"},{"location":"usage/scripts/#pre-post-scripts","text":"Like npm , PDM also supports tasks composition by pre and post scripts, pre script will be run before the given task and post script will be run after. 1 2 3 4 [tool.pdm.scripts] pre_compress = \"{{ Run BEFORE the `compress` script }}\" compress = \"tar czvf compressed.tar.gz data/\" post_compress = \"{{ Run AFTER the `compress` script }}\" In this example, pdm run compress will run all these 3 scripts sequentially. The pipeline fails fast In a pipeline of pre - self - post scripts, a failure will cancel the subsequent execution.","title":"Pre &amp; Post Scripts"},{"location":"usage/scripts/#hook-scripts","text":"Under certain situations PDM will look for some special hook scripts for execution: post_init : Run after pdm init pre_install : Run before installing packages post_install : Run after packages are installed pre_lock : Run before dependency resolution post_lock : Run after dependency resolution pre_build : Run before building distributions post_build : Run after distributions are built Note Pre & post scripts can't receive any arguments. Avoid name conflicts If there exists an install scripts under [tool.pdm.scripts] table, pre_install scripts can be triggered by both pdm install and pdm run install . So it is recommended to not use the preserved names.","title":"Hook Scripts"}]}